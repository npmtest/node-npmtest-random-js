{"/home/travis/build/npmtest/node-npmtest-random-js/test.js":"/* istanbul instrument in package npmtest_random_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-random-js/lib.npmtest_random_js.js":"/* istanbul instrument in package npmtest_random_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_random_js = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_random_js = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-random-js/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-random-js && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_random_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_random_js\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_random_js.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_random_js.rollup.js'] =\n            local.assetsDict['/assets.npmtest_random_js.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_random_js.__dirname + '/lib.npmtest_random_js.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-random-js/node_modules/random-js/lib/random.js":"/*jshint eqnull:true*/\n(function (root) {\n  \"use strict\";\n\n  var GLOBAL_KEY = \"Random\";\n\n  var imul = (typeof Math.imul !== \"function\" || Math.imul(0xffffffff, 5) !== -5 ?\n    function (a, b) {\n      var ah = (a >>> 16) & 0xffff;\n      var al = a & 0xffff;\n      var bh = (b >>> 16) & 0xffff;\n      var bl = b & 0xffff;\n      // the shift by 0 fixes the sign on the high part\n      // the final |0 converts the unsigned value into a signed value\n      return (al * bl) + (((ah * bl + al * bh) << 16) >>> 0) | 0;\n    } :\n    Math.imul);\n\n  var stringRepeat = (typeof String.prototype.repeat === \"function\" && \"x\".repeat(3) === \"xxx\" ?\n    function (x, y) {\n      return x.repeat(y);\n    } : function (pattern, count) {\n      var result = \"\";\n      while (count > 0) {\n        if (count & 1) {\n          result += pattern;\n        }\n        count >>= 1;\n        pattern += pattern;\n      }\n      return result;\n    });\n\n  function Random(engine) {\n    if (!(this instanceof Random)) {\n      return new Random(engine);\n    }\n\n    if (engine == null) {\n      engine = Random.engines.nativeMath;\n    } else if (typeof engine !== \"function\") {\n      throw new TypeError(\"Expected engine to be a function, got \" + typeof engine);\n    }\n    this.engine = engine;\n  }\n  var proto = Random.prototype;\n\n  Random.engines = {\n    nativeMath: function () {\n      return (Math.random() * 0x100000000) | 0;\n    },\n    mt19937: (function (Int32Array) {\n      // http://en.wikipedia.org/wiki/Mersenne_twister\n      function refreshData(data) {\n        var k = 0;\n        var tmp = 0;\n        for (;\n          (k | 0) < 227; k = (k + 1) | 0) {\n          tmp = (data[k] & 0x80000000) | (data[(k + 1) | 0] & 0x7fffffff);\n          data[k] = data[(k + 397) | 0] ^ (tmp >>> 1) ^ ((tmp & 0x1) ? 0x9908b0df : 0);\n        }\n\n        for (;\n          (k | 0) < 623; k = (k + 1) | 0) {\n          tmp = (data[k] & 0x80000000) | (data[(k + 1) | 0] & 0x7fffffff);\n          data[k] = data[(k - 227) | 0] ^ (tmp >>> 1) ^ ((tmp & 0x1) ? 0x9908b0df : 0);\n        }\n\n        tmp = (data[623] & 0x80000000) | (data[0] & 0x7fffffff);\n        data[623] = data[396] ^ (tmp >>> 1) ^ ((tmp & 0x1) ? 0x9908b0df : 0);\n      }\n\n      function temper(value) {\n        value ^= value >>> 11;\n        value ^= (value << 7) & 0x9d2c5680;\n        value ^= (value << 15) & 0xefc60000;\n        return value ^ (value >>> 18);\n      }\n\n      function seedWithArray(data, source) {\n        var i = 1;\n        var j = 0;\n        var sourceLength = source.length;\n        var k = Math.max(sourceLength, 624) | 0;\n        var previous = data[0] | 0;\n        for (;\n          (k | 0) > 0; --k) {\n          data[i] = previous = ((data[i] ^ imul((previous ^ (previous >>> 30)), 0x0019660d)) + (source[j] | 0) + (j | 0)) | 0;\n          i = (i + 1) | 0;\n          ++j;\n          if ((i | 0) > 623) {\n            data[0] = data[623];\n            i = 1;\n          }\n          if (j >= sourceLength) {\n            j = 0;\n          }\n        }\n        for (k = 623;\n          (k | 0) > 0; --k) {\n          data[i] = previous = ((data[i] ^ imul((previous ^ (previous >>> 30)), 0x5d588b65)) - i) | 0;\n          i = (i + 1) | 0;\n          if ((i | 0) > 623) {\n            data[0] = data[623];\n            i = 1;\n          }\n        }\n        data[0] = 0x80000000;\n      }\n\n      function mt19937() {\n        var data = new Int32Array(624);\n        var index = 0;\n        var uses = 0;\n\n        function next() {\n          if ((index | 0) >= 624) {\n            refreshData(data);\n            index = 0;\n          }\n\n          var value = data[index];\n          index = (index + 1) | 0;\n          uses += 1;\n          return temper(value) | 0;\n        }\n        next.getUseCount = function() {\n          return uses;\n        };\n        next.discard = function (count) {\n          uses += count;\n          if ((index | 0) >= 624) {\n            refreshData(data);\n            index = 0;\n          }\n          while ((count - index) > 624) {\n            count -= 624 - index;\n            refreshData(data);\n            index = 0;\n          }\n          index = (index + count) | 0;\n          return next;\n        };\n        next.seed = function (initial) {\n          var previous = 0;\n          data[0] = previous = initial | 0;\n\n          for (var i = 1; i < 624; i = (i + 1) | 0) {\n            data[i] = previous = (imul((previous ^ (previous >>> 30)), 0x6c078965) + i) | 0;\n          }\n          index = 624;\n          uses = 0;\n          return next;\n        };\n        next.seedWithArray = function (source) {\n          next.seed(0x012bd6aa);\n          seedWithArray(data, source);\n          return next;\n        };\n        next.autoSeed = function () {\n          return next.seedWithArray(Random.generateEntropyArray());\n        };\n        return next;\n      }\n\n      return mt19937;\n    }(typeof Int32Array === \"function\" ? Int32Array : Array)),\n    browserCrypto: (typeof crypto !== \"undefined\" && typeof crypto.getRandomValues === \"function\" && typeof Int32Array === \"function\") ? (function () {\n      var data = null;\n      var index = 128;\n\n      return function () {\n        if (index >= 128) {\n          if (data === null) {\n            data = new Int32Array(128);\n          }\n          crypto.getRandomValues(data);\n          index = 0;\n        }\n\n        return data[index++] | 0;\n      };\n    }()) : null\n  };\n\n  Random.generateEntropyArray = function () {\n    var array = [];\n    var engine = Random.engines.nativeMath;\n    for (var i = 0; i < 16; ++i) {\n      array[i] = engine() | 0;\n    }\n    array.push(new Date().getTime() | 0);\n    return array;\n  };\n\n  function returnValue(value) {\n    return function () {\n      return value;\n    };\n  }\n\n  // [-0x80000000, 0x7fffffff]\n  Random.int32 = function (engine) {\n    return engine() | 0;\n  };\n  proto.int32 = function () {\n    return Random.int32(this.engine);\n  };\n\n  // [0, 0xffffffff]\n  Random.uint32 = function (engine) {\n    return engine() >>> 0;\n  };\n  proto.uint32 = function () {\n    return Random.uint32(this.engine);\n  };\n\n  // [0, 0x1fffffffffffff]\n  Random.uint53 = function (engine) {\n    var high = engine() & 0x1fffff;\n    var low = engine() >>> 0;\n    return (high * 0x100000000) + low;\n  };\n  proto.uint53 = function () {\n    return Random.uint53(this.engine);\n  };\n\n  // [0, 0x20000000000000]\n  Random.uint53Full = function (engine) {\n    while (true) {\n      var high = engine() | 0;\n      if (high & 0x200000) {\n        if ((high & 0x3fffff) === 0x200000 && (engine() | 0) === 0) {\n          return 0x20000000000000;\n        }\n      } else {\n        var low = engine() >>> 0;\n        return ((high & 0x1fffff) * 0x100000000) + low;\n      }\n    }\n  };\n  proto.uint53Full = function () {\n    return Random.uint53Full(this.engine);\n  };\n\n  // [-0x20000000000000, 0x1fffffffffffff]\n  Random.int53 = function (engine) {\n    var high = engine() | 0;\n    var low = engine() >>> 0;\n    return ((high & 0x1fffff) * 0x100000000) + low + (high & 0x200000 ? -0x20000000000000 : 0);\n  };\n  proto.int53 = function () {\n    return Random.int53(this.engine);\n  };\n\n  // [-0x20000000000000, 0x20000000000000]\n  Random.int53Full = function (engine) {\n    while (true) {\n      var high = engine() | 0;\n      if (high & 0x400000) {\n        if ((high & 0x7fffff) === 0x400000 && (engine() | 0) === 0) {\n          return 0x20000000000000;\n        }\n      } else {\n        var low = engine() >>> 0;\n        return ((high & 0x1fffff) * 0x100000000) + low + (high & 0x200000 ? -0x20000000000000 : 0);\n      }\n    }\n  };\n  proto.int53Full = function () {\n    return Random.int53Full(this.engine);\n  };\n\n  function add(generate, addend) {\n    if (addend === 0) {\n      return generate;\n    } else {\n      return function (engine) {\n        return generate(engine) + addend;\n      };\n    }\n  }\n\n  Random.integer = (function () {\n    function isPowerOfTwoMinusOne(value) {\n      return ((value + 1) & value) === 0;\n    }\n\n    function bitmask(masking) {\n      return function (engine) {\n        return engine() & masking;\n      };\n    }\n\n    function downscaleToLoopCheckedRange(range) {\n      var extendedRange = range + 1;\n      var maximum = extendedRange * Math.floor(0x100000000 / extendedRange);\n      return function (engine) {\n        var value = 0;\n        do {\n          value = engine() >>> 0;\n        } while (value >= maximum);\n        return value % extendedRange;\n      };\n    }\n\n    function downscaleToRange(range) {\n      if (isPowerOfTwoMinusOne(range)) {\n        return bitmask(range);\n      } else {\n        return downscaleToLoopCheckedRange(range);\n      }\n    }\n\n    function isEvenlyDivisibleByMaxInt32(value) {\n      return (value | 0) === 0;\n    }\n\n    function upscaleWithHighMasking(masking) {\n      return function (engine) {\n        var high = engine() & masking;\n        var low = engine() >>> 0;\n        return (high * 0x100000000) + low;\n      };\n    }\n\n    function upscaleToLoopCheckedRange(extendedRange) {\n      var maximum = extendedRange * Math.floor(0x20000000000000 / extendedRange);\n      return function (engine) {\n        var ret = 0;\n        do {\n          var high = engine() & 0x1fffff;\n          var low = engine() >>> 0;\n          ret = (high * 0x100000000) + low;\n        } while (ret >= maximum);\n        return ret % extendedRange;\n      };\n    }\n\n    function upscaleWithinU53(range) {\n      var extendedRange = range + 1;\n      if (isEvenlyDivisibleByMaxInt32(extendedRange)) {\n        var highRange = ((extendedRange / 0x100000000) | 0) - 1;\n        if (isPowerOfTwoMinusOne(highRange)) {\n          return upscaleWithHighMasking(highRange);\n        }\n      }\n      return upscaleToLoopCheckedRange(extendedRange);\n    }\n\n    function upscaleWithinI53AndLoopCheck(min, max) {\n      return function (engine) {\n        var ret = 0;\n        do {\n          var high = engine() | 0;\n          var low = engine() >>> 0;\n          ret = ((high & 0x1fffff) * 0x100000000) + low + (high & 0x200000 ? -0x20000000000000 : 0);\n        } while (ret < min || ret > max);\n        return ret;\n      };\n    }\n\n    return function (min, max) {\n      min = Math.floor(min);\n      max = Math.floor(max);\n      if (min < -0x20000000000000 || !isFinite(min)) {\n        throw new RangeError(\"Expected min to be at least \" + (-0x20000000000000));\n      } else if (max > 0x20000000000000 || !isFinite(max)) {\n        throw new RangeError(\"Expected max to be at most \" + 0x20000000000000);\n      }\n\n      var range = max - min;\n      if (range <= 0 || !isFinite(range)) {\n        return returnValue(min);\n      } else if (range === 0xffffffff) {\n        if (min === 0) {\n          return Random.uint32;\n        } else {\n          return add(Random.int32, min + 0x80000000);\n        }\n      } else if (range < 0xffffffff) {\n        return add(downscaleToRange(range), min);\n      } else if (range === 0x1fffffffffffff) {\n        return add(Random.uint53, min);\n      } else if (range < 0x1fffffffffffff) {\n        return add(upscaleWithinU53(range), min);\n      } else if (max - 1 - min === 0x1fffffffffffff) {\n        return add(Random.uint53Full, min);\n      } else if (min === -0x20000000000000 && max === 0x20000000000000) {\n        return Random.int53Full;\n      } else if (min === -0x20000000000000 && max === 0x1fffffffffffff) {\n        return Random.int53;\n      } else if (min === -0x1fffffffffffff && max === 0x20000000000000) {\n        return add(Random.int53, 1);\n      } else if (max === 0x20000000000000) {\n        return add(upscaleWithinI53AndLoopCheck(min - 1, max - 1), 1);\n      } else {\n        return upscaleWithinI53AndLoopCheck(min, max);\n      }\n    };\n  }());\n  proto.integer = function (min, max) {\n    return Random.integer(min, max)(this.engine);\n  };\n\n  // [0, 1] (floating point)\n  Random.realZeroToOneInclusive = function (engine) {\n    return Random.uint53Full(engine) / 0x20000000000000;\n  };\n  proto.realZeroToOneInclusive = function () {\n    return Random.realZeroToOneInclusive(this.engine);\n  };\n\n  // [0, 1) (floating point)\n  Random.realZeroToOneExclusive = function (engine) {\n    return Random.uint53(engine) / 0x20000000000000;\n  };\n  proto.realZeroToOneExclusive = function () {\n    return Random.realZeroToOneExclusive(this.engine);\n  };\n\n  Random.real = (function () {\n    function multiply(generate, multiplier) {\n      if (multiplier === 1) {\n        return generate;\n      } else if (multiplier === 0) {\n        return function () {\n          return 0;\n        };\n      } else {\n        return function (engine) {\n          return generate(engine) * multiplier;\n        };\n      }\n    }\n\n    return function (left, right, inclusive) {\n      if (!isFinite(left)) {\n        throw new RangeError(\"Expected left to be a finite number\");\n      } else if (!isFinite(right)) {\n        throw new RangeError(\"Expected right to be a finite number\");\n      }\n      return add(\n        multiply(\n          inclusive ? Random.realZeroToOneInclusive : Random.realZeroToOneExclusive,\n          right - left),\n        left);\n    };\n  }());\n  proto.real = function (min, max, inclusive) {\n    return Random.real(min, max, inclusive)(this.engine);\n  };\n\n  Random.bool = (function () {\n    function isLeastBitTrue(engine) {\n      return (engine() & 1) === 1;\n    }\n\n    function lessThan(generate, value) {\n      return function (engine) {\n        return generate(engine) < value;\n      };\n    }\n\n    function probability(percentage) {\n      if (percentage <= 0) {\n        return returnValue(false);\n      } else if (percentage >= 1) {\n        return returnValue(true);\n      } else {\n        var scaled = percentage * 0x100000000;\n        if (scaled % 1 === 0) {\n          return lessThan(Random.int32, (scaled - 0x80000000) | 0);\n        } else {\n          return lessThan(Random.uint53, Math.round(percentage * 0x20000000000000));\n        }\n      }\n    }\n\n    return function (numerator, denominator) {\n      if (denominator == null) {\n        if (numerator == null) {\n          return isLeastBitTrue;\n        }\n        return probability(numerator);\n      } else {\n        if (numerator <= 0) {\n          return returnValue(false);\n        } else if (numerator >= denominator) {\n          return returnValue(true);\n        }\n        return lessThan(Random.integer(0, denominator - 1), numerator);\n      }\n    };\n  }());\n  proto.bool = function (numerator, denominator) {\n    return Random.bool(numerator, denominator)(this.engine);\n  };\n\n  function toInteger(value) {\n    var number = +value;\n    if (number < 0) {\n      return Math.ceil(number);\n    } else {\n      return Math.floor(number);\n    }\n  }\n\n  function convertSliceArgument(value, length) {\n    if (value < 0) {\n      return Math.max(value + length, 0);\n    } else {\n      return Math.min(value, length);\n    }\n  }\n  Random.pick = function (engine, array, begin, end) {\n    var length = array.length;\n    var start = begin == null ? 0 : convertSliceArgument(toInteger(begin), length);\n    var finish = end === void 0 ? length : convertSliceArgument(toInteger(end), length);\n    if (start >= finish) {\n      return void 0;\n    }\n    var distribution = Random.integer(start, finish - 1);\n    return array[distribution(engine)];\n  };\n  proto.pick = function (array, begin, end) {\n    return Random.pick(this.engine, array, begin, end);\n  };\n\n  function returnUndefined() {\n    return void 0;\n  }\n  var slice = Array.prototype.slice;\n  Random.picker = function (array, begin, end) {\n    var clone = slice.call(array, begin, end);\n    if (!clone.length) {\n      return returnUndefined;\n    }\n    var distribution = Random.integer(0, clone.length - 1);\n    return function (engine) {\n      return clone[distribution(engine)];\n    };\n  };\n\n  Random.shuffle = function (engine, array, downTo) {\n    var length = array.length;\n    if (length) {\n      if (downTo == null) {\n        downTo = 0;\n      }\n      for (var i = (length - 1) >>> 0; i > downTo; --i) {\n        var distribution = Random.integer(0, i);\n        var j = distribution(engine);\n        if (i !== j) {\n          var tmp = array[i];\n          array[i] = array[j];\n          array[j] = tmp;\n        }\n      }\n    }\n    return array;\n  };\n  proto.shuffle = function (array) {\n    return Random.shuffle(this.engine, array);\n  };\n\n  Random.sample = function (engine, population, sampleSize) {\n    if (sampleSize < 0 || sampleSize > population.length || !isFinite(sampleSize)) {\n      throw new RangeError(\"Expected sampleSize to be within 0 and the length of the population\");\n    }\n\n    if (sampleSize === 0) {\n      return [];\n    }\n\n    var clone = slice.call(population);\n    var length = clone.length;\n    if (length === sampleSize) {\n      return Random.shuffle(engine, clone, 0);\n    }\n    var tailLength = length - sampleSize;\n    return Random.shuffle(engine, clone, tailLength - 1).slice(tailLength);\n  };\n  proto.sample = function (population, sampleSize) {\n    return Random.sample(this.engine, population, sampleSize);\n  };\n\n  Random.die = function (sideCount) {\n    return Random.integer(1, sideCount);\n  };\n  proto.die = function (sideCount) {\n    return Random.die(sideCount)(this.engine);\n  };\n\n  Random.dice = function (sideCount, dieCount) {\n    var distribution = Random.die(sideCount);\n    return function (engine) {\n      var result = [];\n      result.length = dieCount;\n      for (var i = 0; i < dieCount; ++i) {\n        result[i] = distribution(engine);\n      }\n      return result;\n    };\n  };\n  proto.dice = function (sideCount, dieCount) {\n    return Random.dice(sideCount, dieCount)(this.engine);\n  };\n\n  // http://en.wikipedia.org/wiki/Universally_unique_identifier\n  Random.uuid4 = (function () {\n    function zeroPad(string, zeroCount) {\n      return stringRepeat(\"0\", zeroCount - string.length) + string;\n    }\n\n    return function (engine) {\n      var a = engine() >>> 0;\n      var b = engine() | 0;\n      var c = engine() | 0;\n      var d = engine() >>> 0;\n\n      return (\n        zeroPad(a.toString(16), 8) +\n        \"-\" +\n        zeroPad((b & 0xffff).toString(16), 4) +\n        \"-\" +\n        zeroPad((((b >> 4) & 0x0fff) | 0x4000).toString(16), 4) +\n        \"-\" +\n        zeroPad(((c & 0x3fff) | 0x8000).toString(16), 4) +\n        \"-\" +\n        zeroPad(((c >> 4) & 0xffff).toString(16), 4) +\n        zeroPad(d.toString(16), 8));\n    };\n  }());\n  proto.uuid4 = function () {\n    return Random.uuid4(this.engine);\n  };\n\n  Random.string = (function () {\n    // has 2**x chars, for faster uniform distribution\n    var DEFAULT_STRING_POOL = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-\";\n\n    return function (pool) {\n      if (pool == null) {\n        pool = DEFAULT_STRING_POOL;\n      }\n\n      var length = pool.length;\n      if (!length) {\n        throw new Error(\"Expected pool not to be an empty string\");\n      }\n\n      var distribution = Random.integer(0, length - 1);\n      return function (engine, length) {\n        var result = \"\";\n        for (var i = 0; i < length; ++i) {\n          var j = distribution(engine);\n          result += pool.charAt(j);\n        }\n        return result;\n      };\n    };\n  }());\n  proto.string = function (length, pool) {\n    return Random.string(pool)(this.engine, length);\n  };\n\n  Random.hex = (function () {\n    var LOWER_HEX_POOL = \"0123456789abcdef\";\n    var lowerHex = Random.string(LOWER_HEX_POOL);\n    var upperHex = Random.string(LOWER_HEX_POOL.toUpperCase());\n\n    return function (upper) {\n      if (upper) {\n        return upperHex;\n      } else {\n        return lowerHex;\n      }\n    };\n  }());\n  proto.hex = function (length, upper) {\n    return Random.hex(upper)(this.engine, length);\n  };\n\n  Random.date = function (start, end) {\n    if (!(start instanceof Date)) {\n      throw new TypeError(\"Expected start to be a Date, got \" + typeof start);\n    } else if (!(end instanceof Date)) {\n      throw new TypeError(\"Expected end to be a Date, got \" + typeof end);\n    }\n    var distribution = Random.integer(start.getTime(), end.getTime());\n    return function (engine) {\n      return new Date(distribution(engine));\n    };\n  };\n  proto.date = function (start, end) {\n    return Random.date(start, end)(this.engine);\n  };\n\n  if (typeof define === \"function\" && define.amd) {\n    define(function () {\n      return Random;\n    });\n  } else if (typeof module !== \"undefined\" && typeof require === \"function\") {\n    module.exports = Random;\n  } else {\n    (function () {\n      var oldGlobal = root[GLOBAL_KEY];\n      Random.noConflict = function () {\n        root[GLOBAL_KEY] = oldGlobal;\n        return this;\n      };\n    }());\n    root[GLOBAL_KEY] = Random;\n  }\n}(this));","/home/travis/build/npmtest/node-npmtest-random-js/node_modules/random-js/benchmark/bool.js":"/*jshint node:true*/\n\"use strict\";\n\nvar Benchmark = require('benchmark');\nvar Random = require('../lib/random');\n\nvar suite = new Benchmark.Suite();\n\nvar nativeMath = Random.engines.nativeMath;\n\nvar simple = Random.bool();\nvar oneHalf = Random.bool(1, 2);\nvar fiftyPercent = Random.bool(1 / 2);\nvar oneThird = Random.bool(1, 3);\nvar twoFifths = Random.bool(2, 5);\nvar oneEighth = Random.bool(1 / 8);\nvar fiveTwelfths = Random.bool(5 / 12);\n\nsuite\n  .add('bool()', function () {\n    return simple(nativeMath);\n  })\n  .add('bool(1, 2)', function () {\n    return oneHalf(nativeMath);\n  })\n  .add('bool(1 / 2)', function () {\n    return fiftyPercent(nativeMath);\n  })\n  .add('bool(1, 3)', function () {\n    return oneThird(nativeMath);\n  })\n  .add('bool(2, 5)', function () {\n    return twoFifths(nativeMath);\n  })\n  .add('bool(1 / 8)', function () {\n    return oneEighth(nativeMath);\n  })\n  .add('bool(5 / 12)', function () {\n    return fiveTwelfths(nativeMath);\n  })\n  .on('cycle', function (event) {\n    console.log(String(event.target));\n  })\n  .on('complete', function () {\n    console.log('Fastest is ' + this.filter('fastest').pluck('name'));\n  })\n  .run({\n    async: true\n  });","/home/travis/build/npmtest/node-npmtest-random-js/node_modules/random-js/benchmark/engines.js":"/*jshint node:true*/\n\"use strict\";\n\nvar Benchmark = require('benchmark');\nvar Random = require('../lib/random');\n\nvar suite = new Benchmark.Suite();\n\nvar nativeMath = Random.engines.nativeMath;\nvar mt19937 = Random.engines.mt19937().autoSeed();\nvar browserCrypto = Random.engines.browserCrypto;\n\nsuite\n  .add('engines.nativeMath', function () {\n    return nativeMath();\n  })\n  .add('engines.mt19937', function () {\n    return mt19937();\n  });\nif (browserCrypto) {\n  suite.add('engines.browserCrypto', function () {\n    return browserCrypto();\n  });\n}\nsuite\n  .on('cycle', function (event) {\n    console.log(String(event.target));\n  })\n  .on('complete', function () {\n    console.log('Fastest is ' + this.filter('fastest').pluck('name'));\n  })\n  .run({\n    async: true\n  });","/home/travis/build/npmtest/node-npmtest-random-js/node_modules/random-js/benchmark/integer.js":"/*jshint node:true*/\n\"use strict\";\n\nvar Benchmark = require('benchmark');\nvar Random = require('../lib/random');\n\nvar suite = new Benchmark.Suite();\n\nvar nativeMath = Random.engines.nativeMath;\n\n// same min and max\nvar _1_1 = Random.integer(1, 1);\n\n// easily maskable, since range is 2^x\nvar _0_15 = Random.integer(0, 15);\nvar _0_255 = Random.integer(0, 255);\nvar uint31 = Random.integer(0, 0x7fffffff);\nvar int31 = Random.integer(-0x4000000, 0x3fffffff);\n\n// fits perfectly into int32\nvar int32 = Random.integer(-0x80000000, 0x7fffffff);\nvar uint32 = Random.integer(0, 0xffffffff);\nvar uint32Plus1 = Random.integer(1, 0x100000000);\n\n// within int32\nvar _0_2 = Random.integer(0, 2);\nvar _3_7 = Random.integer(3, 7);\nvar _1_20 = Random.integer(1, 20);\nvar _1_2 = Random.integer(1, 2);\nvar _1_6 = Random.integer(1, 2 * 3);\nvar _1_30 = Random.integer(1, 2 * 3 * 5);\nvar _1_210 = Random.integer(1, 2 * 3 * 5 * 7);\nvar _1_2310 = Random.integer(1, 2 * 3 * 5 * 7 * 11);\nvar _1_30030 = Random.integer(1, 2 * 3 * 5 * 7 * 11 * 13);\nvar _1_510510 = Random.integer(1, 2 * 3 * 5 * 7 * 11 * 13 * 17);\nvar _1_9699690 = Random.integer(1, 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19);\nvar _1_223092870 = Random.integer(1, 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23);\n// within uint53-1\nvar _1_6469693230 = Random.integer(1, 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29);\nvar _1_200560490130 = Random.integer(1, 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31);\nvar _1_7420738134810 = Random.integer(1, 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37);\nvar _1_304250263527210 = Random.integer(1, 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41);\nvar _1_6541380665835015 = Random.integer(1, 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43);\nvar _1_0x300000000 = Random.integer(1, 0x300000000);\n\nvar uint53 = Random.integer(0, 0x1fffffffffffff);\nvar uint53Plus1 = Random.integer(1, 0x20000000000000);\nvar uint53Full = Random.integer(0, 0x20000000000000);\nvar int53 = Random.integer(-0x20000000000000, 0x1fffffffffffff);\nvar int53Plus1 = Random.integer(-0x1fffffffffffff, 0x20000000000000);\nvar int53Full = Random.integer(-0x20000000000000, 0x20000000000000);\n\n// lower part of range is evenly int32, high part is easily-maskable.\nvar _1_0x200000000 = Random.integer(1, 0x200000000);\nvar _1_0x10000000000000 = Random.integer(1, 0x10000000000000);\n\n// within int53-1\nvar _neg0x1fffffffffffff_0xe7ab3bddafc0e = Random.integer(-0x1fffffffffffff, 0xe7ab3bddafc0e);\nvar _neg0xe7ab3bddafc0d_0x20000000000000 = Random.integer(-0xe7ab3bddafc0d, 0x20000000000000);\n\nsuite\n  .add('integer(1, 1)', function () {\n    return _1_1(nativeMath);\n  })\n  .add('integer(0, 0x0f)', function () {\n    return _0_15(nativeMath);\n  })\n  .add('integer(0, 0xff)', function () {\n    return _0_255(nativeMath);\n  })\n  .add('integer(0, 0x7fffffff)', function () {\n    return uint31(nativeMath);\n  })\n  .add('integer(-0x40000000, 0x3fffffff)', function () {\n    return int31(nativeMath);\n  })\n  .add('integer(-0x80000000, 0x7fffffff)', function () {\n    return int32(nativeMath);\n  })\n  .add('integer(0, 0xffffffff)', function () {\n    return uint32(nativeMath);\n  })\n  .add('integer(1, 0x100000000)', function () {\n    return uint32Plus1(nativeMath);\n  })\n  .add('integer(0, 2)', function () {\n    return _0_2(nativeMath);\n  })\n  .add('integer(3, 7)', function () {\n    return _3_7(nativeMath);\n  })\n  .add('integer(1, 20)', function () {\n    return _1_20(nativeMath);\n  })\n  .add('integer(1, 2)', function () {\n    return _1_2(nativeMath);\n  })\n  .add('integer(1, 2 * 3)', function () {\n    return _1_6(nativeMath);\n  })\n  .add('integer(1, 2 * 3 * 5)', function () {\n    return _1_30(nativeMath);\n  })\n  .add('integer(1, 2 * 3 * 5 * 7)', function () {\n    return _1_210(nativeMath);\n  })\n  .add('integer(1, 2 * 3 * 5 * 7 * 11)', function () {\n    return _1_2310(nativeMath);\n  })\n  .add('integer(1, 2 * 3 * 5 * 7 * 11 * 13)', function () {\n    return _1_30030(nativeMath);\n  })\n  .add('integer(1, 2 * 3 * 5 * 7 * 11 * 13 * 17)', function () {\n    return _1_510510(nativeMath);\n  })\n  .add('integer(1, 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19)', function () {\n    return _1_9699690(nativeMath);\n  })\n  .add('integer(1, 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23)', function () {\n    return _1_223092870(nativeMath);\n  })\n  .add('integer(1, 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29)', function () {\n    return _1_6469693230(nativeMath);\n  })\n  .add('integer(1, 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31)', function () {\n    return _1_200560490130(nativeMath);\n  })\n  .add('integer(1, 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37)', function () {\n    return _1_7420738134810(nativeMath);\n  })\n  .add('integer(1, 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41)', function () {\n    return _1_304250263527210(nativeMath);\n  })\n  .add('integer(1, 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43)', function () {\n    return _1_6541380665835015(nativeMath);\n  })\n  .add('integer(1, 0x300000000)', function () {\n    return _1_0x300000000(nativeMath);\n  })\n  .add('integer(0, 0x1fffffffffffff)', function () {\n    return uint53(nativeMath);\n  })\n  .add('integer(1, 0x20000000000000)', function () {\n    return uint53Plus1(nativeMath);\n  })\n  .add('integer(0, 0x20000000000000)', function () {\n    return uint53Full(nativeMath);\n  })\n  .add('integer(-0x20000000000000, 0x1fffffffffffff)', function () {\n    return int53(nativeMath);\n  })\n  .add('integer(-0x1fffffffffffff, 0x20000000000000)', function () {\n    return int53Plus1(nativeMath);\n  })\n  .add('integer(-0x20000000000000, 0x20000000000000)', function () {\n    return int53Full(nativeMath);\n  })\n  .add('integer(1, 0x200000000)', function () {\n    return _1_0x200000000(nativeMath);\n  })\n  .add('integer(1, 0x10000000000000)', function () {\n    return _1_0x10000000000000(nativeMath);\n  })\n  .add('integer(-0x1fffffffffffff, 0xe7ab3bddafc0e)', function () {\n    return _neg0x1fffffffffffff_0xe7ab3bddafc0e(nativeMath);\n  })\n  .add('integer(-0xe7ab3bddafc0d, 0x20000000000000)', function () {\n    return _neg0xe7ab3bddafc0d_0x20000000000000(nativeMath);\n  })\n  .on('cycle', function (event) {\n    console.log(String(event.target));\n  })\n  .run({\n    async: true\n  });","/home/travis/build/npmtest/node-npmtest-random-js/node_modules/random-js/benchmark/real.js":"/*jshint node:true*/\n\"use strict\";\n\nvar Benchmark = require('benchmark');\nvar Random = require('../lib/random');\n\nvar suite = new Benchmark.Suite();\n\nvar nativeMath = Random.engines.nativeMath;\n\nvar _0_1_exclusive = Random.real(0, 1, false);\nvar _0_1_inclusive = Random.real(0, 1, true);\nvar _0_10_exclusive = Random.real(0, 10, false);\nvar _0_10_inclusive = Random.real(0, 10, true);\nvar _5_10_exclusive = Random.real(5, 10, false);\nvar _5_10_inclusive = Random.real(5, 10, true);\n\nsuite\n  .add('real(0, 1, false)', function () {\n    return _0_1_exclusive(nativeMath);\n  })\n  .add('real(0, 1, true)', function () {\n    return _0_1_inclusive(nativeMath);\n  })\n  .add('real(0, 10, false)', function () {\n    return _0_10_exclusive(nativeMath);\n  })\n  .add('real(0, 10, true)', function () {\n    return _0_10_inclusive(nativeMath);\n  })\n  .add('real(5, 10, false)', function () {\n    return _5_10_exclusive(nativeMath);\n  })\n  .add('real(5, 10, true)', function () {\n    return _5_10_inclusive(nativeMath);\n  })\n  .on('cycle', function (event) {\n    console.log(String(event.target));\n  })\n  .on('complete', function () {\n    console.log('Fastest is ' + this.filter('fastest').pluck('name'));\n  })\n  .run({\n    async: true\n  });","/home/travis/build/npmtest/node-npmtest-random-js/node_modules/random-js/karma.conf.js":"// Karma configuration\n// Generated on Sat Feb 01 2014 15:17:26 GMT-0800 (PST)\n\nmodule.exports = function (config) {\n  config.set({\n\n    // base path, that will be used to resolve files and exclude\n    basePath: '',\n\n\n    // frameworks to use\n    frameworks: ['jasmine'],\n\n\n    // list of files / patterns to load in the browser\n    files: [{\n      pattern: 'lib/random.js'\n    }, {\n      pattern: 'spec/**/*Spec.js'\n    }],\n\n\n    // list of files to exclude\n    exclude: [\n\n    ],\n\n    preprocessors: {\n      'lib/random.js': 'coverage'\n    },\n\n\n    // test results reporter to use\n    // possible values: 'dots', 'progress', 'junit', 'growl', 'coverage'\n    reporters: ['progress', 'coverage'],\n\n\n    // web server port\n    port: 9876,\n\n\n    // enable / disable colors in the output (reporters and logs)\n    colors: true,\n\n\n    // level of logging\n    // possible values: config.LOG_DISABLE || config.LOG_ERROR || config.LOG_WARN || config.LOG_INFO || config.LOG_DEBUG\n    logLevel: config.LOG_INFO,\n\n\n    // enable / disable watching file and executing tests whenever any file changes\n    autoWatch: true,\n\n\n    // Start these browsers, currently available:\n    // - Chrome\n    // - ChromeCanary\n    // - Firefox\n    // - Opera\n    // - Safari (only Mac)\n    // - PhantomJS\n    // - IE (only Windows)\n    browsers: ['PhantomJS'],\n\n\n    // If browser does not capture in given timeout [ms], kill it\n    captureTimeout: 60000,\n\n\n    // Continuous Integration mode\n    // if true, it capture browsers, run tests and exit\n    singleRun: false\n  });\n};","/home/travis/build/npmtest/node-npmtest-random-js/node_modules/random-js/spec/RandomSpec.js":"(function (root) {\n  var Random = typeof module !== \"undefined\" ? require(\"../lib/random\") : root.Random;\n  describe(\"Random\", function () {\n    describe(\"constructor\", function () {\n      it(\"returns a Random if called without new\", function () {\n        var random = Random();\n\n        expect(random instanceof Random).toBe(true);\n      });\n\n      describe(\"when passed a non-function\", function () {\n        it(\"throws a TypeError\", function () {\n          expect(function () {\n            return new Random(\"hello\");\n          }).toThrow(new TypeError(\"Expected engine to be a function, got string\"));\n        });\n      });\n\n      describe(\"when passed a function\", function () {\n        it(\"sets engine to the passed-in function\", function () {\n          var dummy = function () {};\n\n          var random = new Random(dummy);\n\n          expect(random.engine).toBe(dummy);\n        });\n      });\n\n      describe(\"when passed nothing\", function () {\n        it(\"sets engine to the nativeMath engine\", function () {\n          var random = new Random();\n\n          expect(random.engine).toBe(Random.engines.nativeMath);\n        });\n      });\n    });\n\n    describe(\"generateEntropyArray\", function () {\n      it(\"returns a non-empty array of int32s\", function () {\n        var actual = Random.generateEntropyArray();\n\n        expect(actual instanceof Array).toBe(true);\n        expect(actual.length).not.toBe(false);\n        for (var i = 0; i < actual.length; ++i) {\n          expect(actual[i]).toBe(actual[i] | 0);\n        }\n      });\n\n      it(\"gets entropy from the current date\", function () {\n        var GLOBAL = typeof module !== \"undefined\" ? global : root;\n        var realDate = GLOBAL.Date;\n        var stubDate = {\n          getTime: function () {\n            return 0x12345678;\n          }\n        };\n        spyOn(GLOBAL, \"Date\").andReturn(stubDate);\n\n        var actual = Random.generateEntropyArray();\n\n        expect(GLOBAL.Date).toHaveBeenCalled();\n        expect(actual).toContain(stubDate.getTime());\n        GLOBAL.Date = realDate;\n      });\n\n      it(\"gets entropy from the nativeMath engine\", function () {\n        spyOn(Random.engines, \"nativeMath\").andCallThrough();\n\n        Random.generateEntropyArray();\n\n        expect(Random.engines.nativeMath).toHaveBeenCalled();\n      });\n    });\n\n    if (typeof root.Random !== \"undefined\") {\n      describe(\"noConflict\", function () {\n        var Random;\n        beforeEach(function () {\n          Random = root.Random;\n        });\n\n        afterEach(function () {\n          root.Random = Random;\n        });\n\n        it(\"returns the Random function\", function () {\n          var actual = Random.noConflict();\n\n          expect(actual).toBe(Random);\n        });\n\n        it(\"sets the Random property on global to the previous value\", function () {\n          Random.noConflict();\n\n          expect(root.Random).toBeUndefined();\n        });\n      });\n    }\n\n    describe(\"prototype methods\", function () {\n      var random;\n      beforeEach(function () {\n        random = new Random(function () {\n          return 0;\n        });\n      });\n\n      describe(\"integer\", function () {\n        it(\"calls Random.integer\", function () {\n          var min = 1234;\n          var max = 2345;\n          var dummy = 1337;\n          var spy = jasmine.createSpy().andReturn(dummy);\n          spyOn(Random, \"integer\").andReturn(spy);\n\n          var actual = random.integer(min, max);\n\n          expect(Random.integer).toHaveBeenCalledWith(min, max);\n          expect(spy).toHaveBeenCalledWith(random.engine);\n          expect(actual).toBe(dummy);\n        });\n      });\n\n      describe(\"real\", function () {\n        it(\"calls Random.real\", function () {\n          var min = 1234.5;\n          var max = 2345.6;\n          var dummy = 1337.5;\n          var spy = jasmine.createSpy().andReturn(dummy);\n          spyOn(Random, \"real\").andReturn(spy);\n\n          var actual = random.real(min, max, true);\n\n          expect(Random.real).toHaveBeenCalledWith(min, max, true);\n          expect(spy).toHaveBeenCalledWith(random.engine);\n          expect(actual).toBe(dummy);\n        });\n      });\n\n      describe(\"bool\", function () {\n        it(\"calls Random.bool\", function () {\n          var numerator = 1234;\n          var denominator = 2345;\n          var dummy = true;\n          var spy = jasmine.createSpy().andReturn(dummy);\n          spyOn(Random, \"bool\").andReturn(spy);\n\n          var actual = random.bool(numerator, denominator);\n\n          expect(Random.bool).toHaveBeenCalledWith(numerator, denominator);\n          expect(spy).toHaveBeenCalledWith(random.engine);\n          expect(actual).toBe(dummy);\n        });\n      });\n\n      describe(\"pick\", function () {\n        it(\"calls Random.pick\", function () {\n          var array = [\"a\", \"b\", \"c\"];\n          var dummy = \"d\";\n          var begin = 1;\n          var end = -1;\n          spyOn(Random, \"pick\").andReturn(dummy);\n\n          var actual = random.pick(array, begin, end);\n\n          expect(Random.pick).toHaveBeenCalledWith(random.engine, array, begin, end);\n          expect(actual).toBe(dummy);\n        });\n      });\n\n      describe(\"shuffle\", function () {\n        it(\"calls Random.shuffle\", function () {\n          var array = [\"a\", \"b\", \"c\"];\n          var dummy = [\"d\"];\n          spyOn(Random, \"shuffle\").andReturn(dummy);\n\n          var actual = random.shuffle(array);\n\n          expect(Random.shuffle).toHaveBeenCalledWith(random.engine, array);\n          expect(actual).toBe(dummy);\n        });\n      });\n\n      describe(\"sample\", function () {\n        it(\"calls Random.sample\", function () {\n          var array = [\"a\", \"b\", \"c\"];\n          var sampleSize = 2;\n          var dummy = [\"d\"];\n          spyOn(Random, \"sample\").andReturn(dummy);\n\n          var actual = random.sample(array, sampleSize);\n\n          expect(Random.sample).toHaveBeenCalledWith(random.engine, array, sampleSize);\n          expect(actual).toBe(dummy);\n        });\n      });\n\n      describe(\"die\", function () {\n        it(\"calls Random.die\", function () {\n          var sideCount = 1337;\n          var dummy = 123;\n          var spy = jasmine.createSpy().andReturn(dummy);\n          spyOn(Random, \"die\").andReturn(spy);\n\n          var actual = random.die(sideCount);\n\n          expect(Random.die).toHaveBeenCalledWith(sideCount);\n          expect(spy).toHaveBeenCalledWith(random.engine);\n          expect(actual).toBe(dummy);\n        });\n      });\n\n      describe(\"dice\", function () {\n        it(\"calls Random.dice\", function () {\n          var sideCount = 1337;\n          var dieCount = 6;\n          var dummy = 123;\n          var spy = jasmine.createSpy().andReturn(dummy);\n          spyOn(Random, \"dice\").andReturn(spy);\n\n          var actual = random.dice(sideCount, dieCount);\n\n          expect(Random.dice).toHaveBeenCalledWith(sideCount, dieCount);\n          expect(spy).toHaveBeenCalledWith(random.engine);\n          expect(actual).toBe(dummy);\n        });\n      });\n\n      describe(\"uuid4\", function () {\n        it(\"calls Random.pick\", function () {\n          var dummy = \"unique\";\n          spyOn(Random, \"uuid4\").andReturn(dummy);\n\n          var actual = random.uuid4();\n\n          expect(Random.uuid4).toHaveBeenCalledWith(random.engine);\n          expect(actual).toBe(dummy);\n        });\n      });\n\n      describe(\"string\", function () {\n        it(\"calls Random.string\", function () {\n          var length = 1337;\n          var pool = \"alpha\";\n          var dummy = \"bravo\";\n          var spy = jasmine.createSpy().andReturn(dummy);\n          spyOn(Random, \"string\").andReturn(spy);\n\n          var actual = random.string(length, pool);\n\n          expect(Random.string).toHaveBeenCalledWith(pool);\n          expect(spy).toHaveBeenCalledWith(random.engine, length);\n          expect(actual).toBe(dummy);\n        });\n      });\n\n      describe(\"hex\", function () {\n        it(\"calls Random.hex\", function () {\n          var length = 1337;\n          var upper = true;\n          var dummy = \"bravo\";\n          var spy = jasmine.createSpy().andReturn(dummy);\n          spyOn(Random, \"hex\").andReturn(spy);\n\n          var actual = random.hex(length, upper);\n\n          expect(Random.hex).toHaveBeenCalledWith(upper);\n          expect(spy).toHaveBeenCalledWith(random.engine, length);\n          expect(actual).toBe(dummy);\n        });\n      });\n\n      describe(\"date\", function () {\n        it(\"calls Random.date\", function () {\n          var now = new Date();\n          var later = new Date(now.getTime() + 86400);\n          var dummy = new Date(now.getTime() + 12345);\n          var spy = jasmine.createSpy().andReturn(dummy);\n          spyOn(Random, \"date\").andReturn(spy);\n\n          var actual = random.date(now, later);\n\n          expect(Random.date).toHaveBeenCalledWith(now, later);\n          expect(spy).toHaveBeenCalledWith(random.engine);\n          expect(actual).toBe(dummy);\n        });\n      });\n\n      [\"int32\", \"uint32\", \"uint53\", \"uint53Full\", \"int53\", \"int53Full\", \"realZeroToOneExclusive\", \"realZeroToOneInclusive\"].forEach(function (method) {\n        describe(method, function () {\n          it(\"calls Random.\" + method, function () {\n            var dummy = 1234;\n            spyOn(Random, method).andReturn(dummy);\n\n            var actual = random[method]();\n\n            expect(Random[method]).toHaveBeenCalledWith(random.engine);\n            expect(actual).toBe(dummy);\n          });\n        });\n      });\n    });\n  });\n}(this));","/home/travis/build/npmtest/node-npmtest-random-js/node_modules/random-js/spec/boolSpec.js":"(function (Random) {\n  describe(\"bool distribution\", function () {\n    describe(\"when passed no arguments\", function () {\n      it(\"returns true if the least bit is 1\", function () {\n        var distribution = Random.bool();\n\n        var actual = distribution(function () {\n          return 1;\n        });\n\n        expect(actual).toBe(true);\n      });\n\n      it(\"returns false if the least bit is 0\", function () {\n        var distribution = Random.bool();\n\n        var actual = distribution(function () {\n          return 2;\n        });\n\n        expect(actual).toBe(false);\n      });\n    });\n\n    describe(\"when passed one argument\", function () {\n      [0, -1, -0.5].forEach(function (value) {\n        describe(\"when passed \" + value, function () {\n          it(\"always returns false\", function () {\n            var distribution = Random.bool(value);\n\n            for (var i = 0; i < 10; ++i) {\n              expect(distribution()).toBe(false);\n            }\n          });\n        });\n      });\n\n      [1, 2, 1.5].forEach(function (value) {\n        describe(\"when passed \" + value, function () {\n          it(\"always returns true\", function () {\n            var distribution = Random.bool(value);\n\n            for (var i = 0; i < 10; ++i) {\n              expect(distribution()).toBe(true);\n            }\n          });\n        });\n      });\n\n      describe(\"when passed a number that only requires 32 bits of randomness\", function () {\n        it(\"returns false if int32 passes in a value >= than the percentage * \" + 0x100000000, function () {\n          var nextValue = 0;\n          var percentage = 0.125;\n          spyOn(Random, \"int32\").andReturn(Math.ceil(percentage * 0x100000000) - 0x80000000);\n          var distribution = Random.bool(percentage);\n\n          var actual = distribution(function () {\n            return 0;\n          });\n\n          expect(actual).toBe(false);\n        });\n\n        it(\"returns true if uint53 passes in a value < than the percentage * \" + 0x100000000, function () {\n          var nextValue = 0;\n          var percentage = 0.125;\n          spyOn(Random, \"int32\").andReturn(Math.floor(percentage * 0x100000000) - 0x80000001);\n          var distribution = Random.bool(percentage);\n\n          var actual = distribution(function () {\n            return 0;\n          });\n\n          expect(actual).toBe(true);\n        });\n      });\n\n      describe(\"when passed a number that requires more than 32 bits of randomness\", function () {\n        it(\"returns false if uint53 passes in a value >= than the percentage * \" + 0x20000000000000, function () {\n          var nextValue = 0;\n          var percentage = 0.12345678901234567890;\n          spyOn(Random, \"uint53\").andReturn(Math.ceil(percentage * 0x20000000000000));\n          var distribution = Random.bool(percentage);\n\n          var actual = distribution(function () {\n            return 0;\n          });\n\n          expect(actual).toBe(false);\n        });\n\n        it(\"returns true if uint53 passes in a value < than the percentage * \" + 0x20000000000000, function () {\n          var nextValue = 0;\n          var percentage = 0.12345678901234567890;\n          spyOn(Random, \"uint53\").andReturn(Math.floor(percentage * 0x20000000000000) - 1);\n          var distribution = Random.bool(percentage);\n\n          var actual = distribution(function () {\n            return 0;\n          });\n\n          expect(actual).toBe(true);\n        });\n      });\n    });\n\n    describe(\"when passed two arguments\", function () {\n      [0, -1].forEach(function (numerator) {\n        describe(\"when passed \" + numerator + \" for the numerator\", function () {\n          it(\"always returns false\", function () {\n            var distribution = Random.bool(numerator, 10);\n\n            for (var i = 0; i < 10; ++i) {\n              expect(distribution()).toBe(false);\n            }\n          });\n        });\n      });\n\n      [0, 1].forEach(function (addition) {\n        describe(\"when passed a numerator that is the denominator + \" + addition, function () {\n          it(\"always returns true\", function () {\n            var distribution = Random.bool(10 + addition, 10);\n\n            for (var i = 0; i < 10; ++i) {\n              expect(distribution()).toBe(true);\n            }\n          });\n        });\n      });\n\n      it(\"uses the integer distribution and returns true if the numerator is < than the result\", function () {\n        var numerator = 3;\n        var denominator = 10;\n        spyOn(Random, \"integer\").andCallFake(function (min, max) {\n          expect(min).toBe(0);\n          expect(max).toBe(denominator - 1);\n          return function () {\n            return 2;\n          };\n        });\n        var distribution = Random.bool(3, 10);\n\n        var actual = distribution();\n\n        expect(actual).toBe(true);\n      });\n\n      it(\"uses the integer distribution and returns false if the numerator is >= than the result\", function () {\n        var numerator = 3;\n        var denominator = 10;\n        spyOn(Random, \"integer\").andCallFake(function (min, max) {\n          expect(min).toBe(0);\n          expect(max).toBe(denominator - 1);\n          return function () {\n            return 3;\n          };\n        });\n        var distribution = Random.bool(3, 10);\n\n        var actual = distribution();\n\n        expect(actual).toBe(false);\n      });\n    });\n  });\n}(typeof module !== \"undefined\" ? require(\"../lib/random\") : Random));","/home/travis/build/npmtest/node-npmtest-random-js/node_modules/random-js/spec/dateSpec.js":"(function (Random) {\n  describe(\"date distribution\", function () {\n    describe(\"when start is not a date\", function () {\n      it(\"throws a TypeError\", function () {\n        expect(function () {\n          Random.date(1234);\n        }).toThrow(new TypeError(\"Expected start to be a Date, got number\"));\n      });\n    });\n\n    describe(\"when end is not a date\", function () {\n      it(\"throws a TypeError\", function () {\n        expect(function () {\n          Random.date(new Date(), 1234);\n        }).toThrow(new TypeError(\"Expected end to be a Date, got number\"));\n      });\n    });\n\n    it(\"returns a wrapped integer distribution from start time to end time\", function () {\n      var now = new Date();\n      var later = new Date(now.getTime() + 86400);\n      var resultDummy = now.getTime() + 40000;\n      var spy = jasmine.createSpy().andReturn(resultDummy);\n      spyOn(Random, \"integer\").andReturn(spy);\n      var engine = function () {};\n\n      var distribution = Random.date(now, later);\n      var actual = distribution(engine);\n\n      expect(Random.integer).toHaveBeenCalledWith(now.getTime(), later.getTime());\n      expect(spy).toHaveBeenCalledWith(engine);\n      expect(actual).toEqual(new Date(resultDummy));\n    });\n  });\n}(typeof module !== \"undefined\" ? require(\"../lib/random\") : Random));","/home/travis/build/npmtest/node-npmtest-random-js/node_modules/random-js/spec/diceSpec.js":"(function (Random) {\n  describe(\"dice\", function () {\n    function makeReturner(input) {\n      var index = 0;\n      return function () {\n        return input[index++];\n      };\n    }\n    it(\"creates a distribution using die and uses it repeatedly\", function () {\n      var data = [1, 2, 3, 4, 5, 6];\n      var dieCount = 4;\n      var expected = data.slice(0, dieCount);\n      spyOn(Random, \"die\").andReturn(makeReturner(data));\n      var sideCount = 1337;\n\n      var dice = Random.dice(sideCount, dieCount);\n      var actual = dice(function () {\n        return 0;\n      });\n\n      expect(Random.die).toHaveBeenCalledWith(sideCount);\n      expect(actual).toEqual(expected);\n    });\n  });\n}(typeof module !== \"undefined\" ? require(\"../lib/random\") : Random));","/home/travis/build/npmtest/node-npmtest-random-js/node_modules/random-js/spec/dieSpec.js":"(function (Random) {\n  describe(\"die\", function () {\n    it(\"returns an integer distribution from 1 to sideCount\", function () {\n      var sideCount = 1337;\n      var dummy = function () {};\n      spyOn(Random, \"integer\").andReturn(dummy);\n\n      var actual = Random.die(sideCount);\n\n      expect(Random.integer).toHaveBeenCalledWith(1, sideCount);\n      expect(actual).toBe(dummy);\n    });\n  });\n}(typeof module !== \"undefined\" ? require(\"../lib/random\") : Random));","/home/travis/build/npmtest/node-npmtest-random-js/node_modules/random-js/spec/engines.browserCryptoSpec.js":"(function (Random) {\n  describe(\"engines.browserCrypto\", function () {\n    if (typeof crypto === \"undefined\" || typeof crypto.getRandomValues !== \"function\" || typeof Int32Array !== \"function\") {\n      it(\"is null due to lack of support\", function () {\n        expect(Random.engines.browserCrypto).toBe(null);\n      });\n    } else {\n      var discard = function (count) {\n        for (var i = 0; i < count; ++i) {\n          Random.engines.browserCrypto();\n        }\n      };\n\n      it(\"calls crypto.getRandomValues on a 128-length Int32Array\", function () {\n        spyOn(crypto, \"getRandomValues\").andCallThrough();\n\n        Random.engines.browserCrypto();\n\n        expect(crypto.getRandomValues).toHaveBeenCalled();\n        var arg = crypto.getRandomValues.mostRecentCall.args[0];\n        expect(arg instanceof Int32Array).toBe(true);\n        expect(arg.length).toBe(128);\n        discard(127);\n      });\n\n      it(\"returns the values returned by crypto.getRandomValues until exhausted\", function () {\n        spyOn(crypto, \"getRandomValues\").andCallFake(function (array) {\n          for (var i = 0; i < 128; ++i) {\n            array[i] = i;\n          }\n        });\n\n        for (var i = 0; i < 128; ++i) {\n          expect(Random.engines.browserCrypto()).toBe(i);\n        }\n      });\n    }\n  });\n}(typeof module !== \"undefined\" ? require(\"../lib/random\") : Random));","/home/travis/build/npmtest/node-npmtest-random-js/node_modules/random-js/spec/engines.mt19937Spec.js":"(function (Random) {\n  describe(\"engines.mt19937\", function () {\n    \"use strict\";\n\n    it(\"is a function\", function () {\n      var mt = Random.engines.mt19937();\n\n      expect(typeof mt).toBe(\"function\");\n    });\n\n    describe(\"method: seed\", function () {\n      it(\"returns the same engine\", function () {\n        var mt = Random.engines.mt19937();\n\n        var actual = mt.seed(0x1234);\n\n        expect(actual).toBe(mt);\n      });\n    });\n\n    describe(\"method: seedWithArray\", function () {\n      it(\"returns the same engine\", function () {\n        var mt = Random.engines.mt19937();\n\n        var actual = mt.seedWithArray([0x1234, 0x2345]);\n\n        expect(actual).toBe(mt);\n      });\n    });\n\n    describe(\"method: getUseCount\", function() {\n      it(\"starts at zero\", function() {\n        var mt = Random.engines.mt19937();\n        expect(mt.getUseCount()).toBe(0);\n\n        mt.seedWithArray([0x1234, 0x2345]);\n        expect(mt.getUseCount()).toBe(0);\n      });\n\n      it(\"increments with each generated random number\", function() {\n        var mt = Random.engines.mt19937();\n        mt.seedWithArray([0x1234, 0x2345]);\n\n        for (var i = 0; i < 1000; i++) {\n          expect(mt.getUseCount()).toBe(i);\n          mt();\n          expect(mt.getUseCount()).toBe(i+1);\n        }\n      });\n\n      it(\"increments with each discarded random number\", function() {\n        var mt = Random.engines.mt19937();\n        mt.seedWithArray([0x1234, 0x2345]);\n\n        mt.discard(1000);\n        expect(mt.getUseCount()).toBe(1000);\n\n        for (var i = 0; i < 1000; i++) {\n          expect(mt.getUseCount()).toBe(1000 + i);\n          mt.discard(1);\n          expect(mt.getUseCount()).toBe(1001 + i);\n        }\n\n        mt.discard(25);\n        expect(mt.getUseCount()).toBe(2025);\n      });\n\n      it(\"can be used to resume from a previous chain with the same seed\", function() {\n        var mt = Random.engines.mt19937();\n        mt.seedWithArray([0x1234, 0x2345]);\n\n        for (var i = 0; i < 1000; i++) {\n          mt();\n        }\n        var mtUseCount = mt.getUseCount();\n        expect(mtUseCount).toBe(1000);\n\n        var newMt = Random.engines.mt19937();\n        newMt.seedWithArray([0x1234, 0x2345]);\n\n        newMt.discard(mtUseCount);\n\n        expect(newMt()).toBe(mt());\n      });\n    });\n\n    describe(\"method: autoSeed\", function () {\n      it(\"returns the same engine\", function () {\n        var mt = Random.engines.mt19937();\n\n        var actual = mt.autoSeed();\n\n        expect(actual).toBe(mt);\n      });\n\n      it(\"calls seedWithArray given the results of generateEntropyArray\", function () {\n        var mt = Random.engines.mt19937();\n        var dummyArray = [1, 2, 3, 4];\n        spyOn(Random, \"generateEntropyArray\").andReturn(dummyArray);\n        spyOn(mt, \"seedWithArray\");\n\n        mt.autoSeed();\n\n        expect(mt.seedWithArray).toHaveBeenCalledWith(dummyArray);\n      });\n    });\n\n    function times(count, callback) {\n      var result = [];\n      for (var i = 0; i < count; ++i) {\n        result.push(callback(i));\n      }\n      return result;\n    }\n\n    function map(array, callback) {\n      return times(array.length, function (i) {\n        return callback(array[i]);\n      });\n    }\n\n    function toInt32Array(array) {\n      return map(array, function (x) {\n        return x | 0;\n      });\n    }\n\n    function test(seed, expectedValues, discard) {\n      expectedValues = toInt32Array(expectedValues);\n      it(\"passes tests for seed = \" + seed, function () {\n        var mt = Random.engines.mt19937();\n        mt.seed(seed);\n        if (discard) {\n            mt.discard(discard);\n        }\n\n        var actual = times(expectedValues.length, mt);\n\n        expect(actual).toEqual(expectedValues);\n      });\n    }\n\n    function testArray(seed, expectedValues, discard) {\n      expectedValues = toInt32Array(expectedValues);\n      it(\"passes tests for seed = [\" + seed.join(\", \") + \"]\", function () {\n        var mt = Random.engines.mt19937();\n        mt.seedWithArray(seed);\n        if (discard) {\n            mt.discard(discard);\n        }\n\n        var actual = times(expectedValues.length, mt);\n\n        expect(actual).toEqual(expectedValues);\n      });\n    }\n\n    test(0x12345678, [0xc6979343, 0x962d2fa, 0xa73a24a4, 0xe118a180, 0xb5475abb, 0x64613c7c, 0x6f32f4db, 0xf27bf199, 0x464dd8dc, 0x95c1fed6, 0xb6df5ff8, 0x82b905ca, 0xc549443, 0xe7187f67, 0xea04d0f, 0x8a77ffb1]);\n    test(0x522f1a98, [0x656de610, 0xf9f66cbb, 0xca483ab3, 0x5cc89323, 0xc0b3add5, 0xb5ef850d, 0xc1df576f, 0x99c6e4e8, 0xc0fa87da, 0x49332e6c, 0x758ea02d, 0x37fb01de, 0x9dfff197, 0xfb8ca9b5, 0x16d070f5, 0x7ae79d05]);\n    test(0x494e9ae8, [0x32d80f38, 0x3213e352, 0x2e4dbaac, 0x30525ddf, 0x9ab54be3, 0xbb2a60e9, 0xcb66ae4a, 0x65b0736, 0x3ba48edb, 0xb611a917, 0xfebe7ed2, 0xd8e93a8c, 0xb4ee1746, 0x9bb2dda3, 0xee409f1e, 0x63e7e93d]);\n    test(0xef97b6ff, [0x236e5ff3, 0xdcb55324, 0x9c3aa2f0, 0x1bb8089, 0x953b982f, 0x56f760aa, 0x972af66, 0xad22b89a, 0xd29e83f1, 0x14d030b7, 0x9c9fd9bd, 0xb8965602, 0x13a2bf88, 0x47750566, 0x878adc28, 0x69eb7d3d]);\n    test(0xbe6df956, [0xd1d1065f, 0xc1ae23b3, 0x98876b5b, 0x4ad68baa, 0x47441e33, 0x97de9b2, 0xe4047131, 0x986960ca, 0xad16dc89, 0x10a438a2, 0x1315dd59, 0x7d4e5240, 0xd68da64, 0xdf421fe8, 0x66412745, 0x7c6536b8]);\n    test(0x8b95a1a0, [0x8652f888, 0xedc5dba6, 0x4c507856, 0x46bacc1, 0xa47f4fb2, 0x46f6c605, 0x940be0f5, 0x587aafae, 0x7de18be1, 0x7d475dc3, 0x7e80b6ea, 0x7f7587fd, 0x5556898d, 0x9684cbc2, 0xec0246d9, 0xfc7fb408]);\n    test(0x1d28981d, [0x9279184f, 0x35a9219a, 0x2c192470, 0xf2fa158e, 0x23063711, 0x42a7634d, 0x8de6c065, 0x6af9beea, 0x899a9e52, 0x90f34ef, 0x4607457d, 0x712c1829, 0x16ca8d28, 0x952cd2a4, 0xa25c0bcf, 0x3d2ec4e4]);\n    test(0x1, [0x6ac1f425, 0xff4780eb, 0xb8672f8c, 0xeebc1448, 0x77eff, 0x20ccc389, 0x4d65aacb, 0xffc11e85, 0x2591cb4f, 0x3c7053c0, 0x17a38090, 0x65865081, 0x2faebfcc, 0x634e1e47, 0x5876aaed, 0xab7479fc, 0x65928d86, 0xef7f7d19, 0x89efe4b2, 0xd8a7d514, 0x6b5054fe, 0x5032b165, 0xaf6a8b92, 0x8648c9d4, 0x3456fb8b, 0x718620fc, 0xe0cc4dea, 0x3ac5929c, 0x702df9d, 0x88cf598e, 0xaba3c232, 0xe9f96a44, 0x6ad47cd7, 0x750b5fd7, 0x8f064be9, 0x6e4242f1, 0x23f065f7, 0xf06aadde, 0x32b6c760, 0xc7448456, 0xccfd988d, 0xb749d7e9, 0xf7dffd89, 0xcd818407, 0x503c913f, 0x17c1cb3d, 0xb13c0e16, 0x84a5a539, 0xe05b0a01, 0xdd71f780, 0xe504f13c, 0xd442f8d1, 0x15c57508, 0xd460e2d8, 0x9ff7e8d, 0x45e69a73, 0x2b7a01af, 0xf2a8fea, 0xe0cdf279, 0xaba7b9c8, 0x192d421e, 0x97d32447, 0x6bcdb583, 0xabf185c6, 0xf5383f95, 0x696aee31, 0x887d8539, 0x3292b203, 0xb11edbc4, 0x4a252b18, 0x50c5a1f1, 0x2461fc2b, 0xafbe864c, 0xc8874c1a, 0xd5aa0734, 0x699c2550, 0x4ae8a6d, 0x8bf7373, 0xc0097529, 0x9fc06dd2, 0xfd26000f, 0xa91f6c40, 0xbf87c8c4, 0x4c6a3019, 0x47cb2d6f, 0x7235dee2, 0xca0e35d7, 0x38dd2787, 0x1a6d051a, 0x12c7fe99, 0x72a92668, 0x78200416, 0xe899b709, 0x189ebec3, 0x4b2a4be7, 0xe743447e, 0x49aba517, 0x1e96ed7d, 0x21498d64, 0x8659409b, 0x4f53ba5, 0x15685139, 0xadc82a53, 0xeab76ca6, 0x362d4288, 0xe9132520, 0x43fadda2, 0x4c86af0a, 0x7dd7bd17, 0x959a868f, 0xda92aef, 0x90df9c57, 0x92f95f19, 0x9d2b0fc7, 0x259000f3, 0xf4df855c, 0x96dcba4a, 0x42cf84be, 0xb3235d2e, 0x3b23d3a0, 0x1a3296d8, 0x88901497, 0x69ff92b7, 0xf32f2541, 0xb1c43571, 0x7e39274d, 0x6a07a703, 0x8a64cb80, 0xcc9bff8, 0xc3f6d4fd, 0x893081cd, 0xb9bc706, 0xa9ee7234, 0x23d4d1d5, 0x83cfc5c6, 0xcadaf602, 0xf1d0f64c, 0x7a10fdb, 0x96287895, 0xe21482cb, 0xe7455907, 0x8a71184d, 0x23318ac8, 0x72aed44b, 0x23a79d4c, 0xe463042b, 0xceb13214, 0x60a95e1e, 0x65ce2624, 0x89d63367, 0x2a54a707, 0xa6fd0f2d, 0xed7133c4, 0x5c7b9a39, 0x59072ef0, 0x922d9dfc, 0xc03538d2, 0xa3494060, 0xb9db010d, 0x20562c0a, 0xe2205917, 0xb0b13f7c, 0x9fa8fb51, 0xa5d2e787, 0xc03dc379, 0x5a9bc098, 0x595166ca, 0xc3633ddc, 0x4519fe94, 0x5b45a9a0, 0xe558cc8c, 0xc0b6bcc1, 0x6d97625e, 0xe19f9e3c, 0xf6ffc1e9, 0x2fcc098, 0xa9d74d52, 0x7f841373, 0x9f277361, 0x12e40882, 0x1d5ffdec, 0xc975a6dc, 0xf311ba67, 0x1066b762, 0x732d710a, 0x5af59eb6, 0x94115760, 0xf11c39e9, 0x687ba752, 0x613ac9d6, 0x3cadccc6, 0xc34ebac2, 0xe743e147, 0xc5873fe7, 0x92dca8b0, 0x4d25f636, 0xbc1c0f, 0xc5d23b85, 0x9dfd3591, 0x272668aa, 0x539f0014, 0x94215a76, 0x86ed47b0, 0x24e5916, 0xe2cd19e5, 0xb583cf8d, 0x5b7607f1, 0x787bea72, 0xe895c261, 0xc3bc56b5, 0x9f948754, 0x77a70c0a, 0x40cdc60, 0x44dd40b7, 0xedef993d, 0xd4e9ce38, 0xb0de9ed9, 0x8d23a195, 0xff508ce7, 0x11f0dc60, 0x2c1e81f9, 0x78f41fd3, 0x231b5419, 0xbe25d5f1, 0xeebe938e, 0x3124088d, 0xb262acd4, 0x76dd1e74, 0x10e5632b, 0x3af90e86, 0xc16606cd, 0x821c82b8, 0xc0fe07bb, 0x3564bb8f, 0xec4b5618, 0xc9f33fb, 0xb6267c89, 0x84d421c2, 0x1fd038c7, 0x2c1a6f35, 0x516dd45, 0x6574c9a4, 0x6b5c365, 0x1b7c4af8, 0x73f1815, 0x8282ed28, 0x3f07b04d, 0x1a2588db, 0xdc2acab1, 0x49e96971, 0x89f0d52f, 0x3b5485cd, 0x8d85bda8, 0xf7b915ce, 0xd78f562d, 0x473fe757, 0x1fc9d290, 0x3bceaf9c, 0x477894ea, 0x17703e2d, 0x95f451c3, 0x91efe374, 0xf8376d42, 0x6afd3bce, 0x8f9fad2e, 0x5e2af980, 0x4c6119d, 0xd020703f, 0xccf6434b, 0x4a2db623, 0x3ba433b5, 0xb7a6f9dd, 0xce9e7221, 0x9cea2a82, 0x634ad5d4, 0x6d49f653, 0xdd111430, 0xc07abf36, 0xbf435d20, 0x6d8520fd, 0x8e65c29c, 0x6daa7837, 0x22eebad2, 0x5ca5c51f, 0xf56c41c, 0x274130de, 0x1f105d4a, 0xefebb488, 0xb67c06d, 0xea99d663, 0x1b84bc20, 0xc82e6e08, 0x39c81654, 0x9dc7bbcd, 0xb6867232, 0x937424f, 0x8f499ca9, 0xa781c340, 0x336de6c, 0x213894d3, 0x126ce818, 0x4b5b2471, 0xf79f6bea, 0x5c5e5b14, 0x916f082c, 0x464f250f, 0x340b069e, 0x12efa1db, 0x40986b8e, 0x26f275f3, 0xbe6b5f13, 0x295fd4fb, 0x3207aa9a, 0xf04f68eb, 0x94d3f056, 0x5f02a187, 0xf8533ae3, 0xccdfc35, 0xd8c9c5af, 0xbdaf436e, 0x3d66a9bc, 0x4c764ef3, 0x7e67b122, 0x3450d064, 0x9eb56ae4, 0xfb546720, 0xd4381793, 0xe49d09c3, 0x28237b18, 0xc264aed3, 0x4c168e5, 0xa6afd65e, 0x11ecf8a6, 0xa28b2af, 0x7c811ce7, 0xd05a3385, 0x9b38684f, 0xc337fe3f, 0x91a03f71, 0x748d6457, 0x513ea9a0, 0x8825c72a, 0xfd15f2ca, 0x1bfd72c2, 0x946a2ed8, 0x256266e2, 0x6150ee9e, 0x823ffa91, 0x8d0af144, 0x3734db40, 0xbece3cbc, 0xea9c0df4, 0xab52d8ce, 0x764fa091, 0x43d1c4a7, 0x21dc44a3, 0x10fb51d1, 0xc3a5569c, 0x5ebdd696, 0x3675b726, 0xa1352aa9, 0x130299ca, 0x35cdf6cd, 0x186d6546, 0xc0b49699, 0x29864ce6, 0x110888f0, 0x5b413430, 0x42a402b2, 0x186617be, 0xce04652c, 0x24ace269, 0x3184e8b6, 0xee56dd00, 0xa3b3b556, 0x939b05f7, 0x8650cb10, 0xd6f2fd13, 0xecc03709, 0x9f901270, 0x43676adc, 0x53139433, 0x10e2d36f, 0xba5ef88a, 0xbc2d487b, 0x85d21144, 0xc5ad7597, 0xbc9fad0e, 0xe8669ebf, 0x2a580e15, 0xee95b8ae, 0xafe30d7c, 0x3925483, 0x6d4379b8, 0x3bff2758, 0xba82bcd0, 0x9de52fae, 0xc19f3236, 0xf2f2bbcf, 0x65c9da47, 0xf33ebdfc, 0xecd9ea0e, 0x8e80d2cd, 0x3419408f, 0xea652d99, 0x20c7735, 0xa43daed4, 0xed2551f9, 0x63d78bba, 0x4b651bd5, 0x7c69e272, 0x2abd56ee, 0x9ab4179d, 0x62b862c, 0x8caf2c25, 0x73b66096, 0xed1a39db, 0xceef49b6, 0xeb321d4c, 0x5e4df20c, 0x65169178, 0x9bf4fd3b, 0xf6985f9a, 0x8ebc7cc, 0x2c885bc7, 0x5ac592d7, 0x205721a7, 0x1419e27d, 0x22948c2b, 0xb17495cc, 0x81731372, 0x3412326, 0x582a65b, 0x75a4c270, 0xf2ae2cfd, 0xf618e345, 0xd3bdd6e2, 0x558d29a1, 0x3d848ab, 0x78da759a, 0x2d1b32b8, 0x1afaebc5, 0x55021e49, 0x80c99534, 0x21890259, 0xe2bc921b, 0xcf3ac82b, 0x88ccf401, 0x5840a952, 0x480edc7f, 0xf0aae25e, 0x5ac60fe0, 0x94fee19a, 0xe5729f54, 0xe0fb221e, 0x3dd23b67, 0xd8408440, 0x61d4496, 0xe7c7ca62, 0xf739df34, 0x75bab683, 0x6e126046, 0x8bdd628c, 0x58a65d27, 0xcc7148e6, 0x93bab453, 0x4924deef, 0x206404b0, 0x7d81413d, 0xf33609c6, 0x995f4b0d, 0x5048cca4, 0x3f9fd17, 0xf3ecbd96, 0x97ee65c2, 0x37e89e7a, 0x6f0569dc, 0x3faad0f9, 0xceaf2dea, 0xdd221d5f, 0x50b3e235, 0x3c3a8b89, 0xe4945aa9, 0xd0aa65b9, 0x93ee7358, 0x8b3cd96d, 0x2f1b4af6, 0x30f66edd, 0xc9b5baf4, 0x96be36cc, 0x9cae1352, 0xc52b16a, 0xdccff8b, 0x4104069, 0x6b91d024, 0xcb9dc70, 0xadd77490, 0x6640149e, 0xeb297c73, 0x93affa6a, 0x1a58d4, 0xde159fb9, 0xfa0ce323, 0xc941eda9, 0x60679151, 0x41343302, 0xf949e0d5, 0x150ea85d, 0x9aceaca4, 0x2862b26d, 0xd42f3d2e, 0x35a15350, 0x93204b1b, 0x6ad99948, 0xa0c99a1c, 0x59023682, 0x491b86e3, 0xb32b998d, 0x963ab5a9, 0xb28ffb79, 0xc0016d24, 0x13211ae4, 0xdbba74a8, 0x9561412, 0xc14d10e1, 0xca161ba6, 0xb2b3e13f, 0xe68909f3, 0xdd4e862e, 0x1319d68, 0x529b38d9, 0x43a2d3e7, 0xabb8d070, 0x77a609ff, 0x736c7965, 0x5c1cea02, 0x61d17c62, 0x3d7ee71c, 0x692aeece, 0x5ee62cb, 0x66c75dba, 0x881b66aa, 0x5140131a, 0x215470e8, 0x9f361b95, 0x8fbbc63a, 0x6e24af7f, 0x2af6f590, 0xf94b17dc, 0x6bcb8e25, 0xad845be9, 0xaf47b4ed, 0x32d579e8, 0x461e54ea, 0x6d3c470b, 0x28f5796, 0x57e58a06, 0x38492860, 0xcc320e8e, 0x82e4864, 0xe1479157, 0xef53c8cb, 0xe7622fa3, 0xc8372ebf, 0xa9a8017b, 0x84810a20, 0x452c5e6e, 0x436e75b, 0x409b1ab1, 0x4c7e2be6, 0xdada977a, 0x8a6c9880, 0x87184e96, 0xdc215461, 0xcd5a6dc6, 0x2f63a6a4, 0x928e9b92, 0x15634b1b, 0xbbaf3a9c, 0xb556de5, 0x84ddf234, 0x719d6666, 0xc558a5f2, 0x4f212de, 0x91a0ad79, 0x11290332, 0x7738c32e, 0xcfd04207, 0x57ba75d5, 0xa2e3f110, 0x11762ae7, 0xc5d9869d, 0x60bfa38b, 0xb4a795bd, 0x14625ffb, 0x3cfb63fa, 0xfb99e70e, 0xb5ef968, 0x2e7e2e1e, 0x47fdd488, 0xcfd5f8a8, 0xdd7683b0, 0xdffd7c9e, 0x12b83597, 0xb03bd9c2, 0xa90b82dc, 0x91ca62c0, 0x2ff80ae7, 0x29356c8c, 0x85b49291, 0x778572fa, 0xe764a1a1, 0x585d320a, 0x79a39c1c, 0x399c37e9, 0xd8d673cb, 0x97aedb85, 0xd6ba3f51, 0x4ff0ea85, 0x23a7db79, 0xea93002a, 0x8a516656, 0xe8dddfb4, 0x7792e739, 0x41d28138, 0x37fb9a4e, 0x1c635f57, 0x70da1ffa, 0x31660175, 0x7af382d1, 0x7fe4bf8a, 0x55521ec8, 0xba849730, 0x24819f5, 0x354c3b13, 0x8166158c, 0x3f7f2099, 0xac53614d, 0xda072b10, 0xe329504, 0x6a750fd8, 0x28572376, 0x9ddf129b, 0x9ae80bb2, 0x3bd18b44, 0x51b8a683, 0x1a1a86ba, 0xe3f8ee0c, 0x840f3482, 0xca55eb4c, 0x7a25e960, 0x37ae0760, 0x27157d3d, 0x3340e58f, 0x9f2eb164, 0xae3151fa, 0x8b443f4a, 0x27fdd38c, 0xa7758b92, 0x82a7049e, 0x2500efbb, 0xfcf1ce85, 0xc0642090, 0x250a875f, 0x38d83660, 0xc5d63bc, 0x84f43dab, 0xe6290eec, 0xc909291f, 0xb71fd6eb, 0x5b77263, 0x4f71a52c, 0x53096b18, 0x6497bbbe, 0xdf77d74f, 0x14ae3e15, 0xd83ee393, 0x5a249f4d, 0x89d73e21, 0x426804, 0xddda0a27, 0x9fe7c87c, 0xf3267c43, 0x3344fca2, 0xd38f68a2, 0xa007502a, 0xdaa74f4e, 0x524aaad2, 0x19473f66, 0xc1d0c26, 0xa6bbe17a, 0xb92e6eb0, 0xb419b07a, 0xc25e56d1, 0x9c38bdfe, 0x68038f05, 0xccb395fa, 0xb44f4ce6, 0x8d9a8db, 0x95da19f5, 0xc52e5d88, 0xf8356128, 0xbb5290c5, 0x4dcafa05, 0x427b9807, 0x505245ce, 0x41cf4b25, 0x39f96369, 0xa1dea14e, 0xac1e1e21, 0x58656a1b, 0xc76772b3, 0xcbed3c4d, 0x833dcc1e, 0x7236a3ab, 0x9d8200ae, 0xc8624409, 0xbb07343, 0xfd8f8f03, 0x723393c3, 0x4cdd1336, 0xf7cfad61, 0x249c07bf, 0x5c0c24e3, 0xe6bc2650, 0x8dd50d1c, 0x8aa3a2a5, 0x694e85c0, 0xf98895a5, 0xf74ed3dd, 0xa2f88192, 0x33fb994e, 0xfe711567, 0xfe29e1c6, 0x8bcb4bdc, 0xa8c15434, 0x86c3d98a, 0xcf1fafa0, 0x22ab672e, 0x7549603f, 0x5b0f7e7b, 0xe3269edd, 0x6b64292, 0x88afeba4, 0x290fa89d, 0x93c895f8, 0xbee21427, 0xeae12b1c, 0x7c84636, 0x506be81d, 0x5dd5c4b7, 0xb9e43567, 0xdcc2b95a, 0xce23ef9b, 0xb15353bc, 0x7ae5676a, 0xb0e1958c, 0x7cd1ac91, 0x304a8047, 0xd766a65b, 0x7120a387, 0x8e370d7c, 0x94e241d3, 0x4516f0b8, 0xfd605e33, 0x7c9b2ba0, 0x343332cc, 0x469dd63e, 0x3f6b6c66, 0x39b330b3, 0x431dc660, 0xa591aa1e, 0xc00b4c96, 0xebcf6905, 0x74fc55db, 0x3352505f, 0xe92ed69, 0xe13e0d96, 0x822e1ecc, 0x773f2c74, 0x3643056d, 0xb9984c16, 0xcc7153e6, 0x4d88f992, 0x4c1de8dd, 0x7d2f951d, 0x7113012, 0x34240034, 0x97eb307a, 0x16af8e1f, 0xd805ed31, 0x2a6aa2e2, 0x618a45d3, 0x80c46179, 0xbff6b6dd, 0xc99ee8ad, 0x82da2aeb, 0xe75273b3, 0x8a7bd156, 0x3832bb0f, 0xf59d7cc7, 0xbcf626b0, 0xcdd0619c, 0x41ff5ed3, 0x846531b, 0x906ffbfd, 0xb59a672b, 0x21e6e893, 0x770a564f, 0x5f412346, 0xf2929158, 0x153603fa, 0x38afd0d6, 0x8177460b, 0x445ed4e5, 0xb1c4a5c1, 0x14db7a5d, 0x74fc810f, 0x6db9f6b3, 0x5c7c7fe2, 0x1be8a756, 0xd0e5de2d, 0xa23fd973, 0xbba4dbf, 0xcd8effaa, 0x6348ae96, 0xb261846d, 0x7561c667, 0xc4266dd2, 0xbc58f0a8, 0x57ab12ac, 0xe8ddf790, 0xd889b911, 0x47040b6b, 0x6dc3ca58, 0xd15944e6, 0xd2f24f80, 0xa80450f0, 0xa0620d61, 0x2e34452, 0x24b75f77, 0xbc4023c7, 0x141129f4, 0x9a7ea00e, 0x4b172a4, 0xae15bc1a, 0x1114e3a0, 0x957e6381, 0x7565bfb0, 0x92d24558, 0x1d03f9f5, 0x5c6ba416, 0x71ccf22, 0xf56d5b5e, 0xc13e9a15, 0xfca848c4, 0x6514ebc3, 0x631b4eb0, 0xbf375c76, 0xd60fe492, 0x73d0cd61, 0xfb6dae8b, 0x7338e28b, 0x95d9b179, 0x7a62f5b4, 0xabc2334c, 0x79585244, 0x1614e8ad, 0xcd9c1cc0, 0xfdcfb459, 0x67033228, 0xc78d5307, 0xe7998307, 0xfe8eb0f6, 0x97cd521, 0xa758363a, 0xc61ca107, 0x994e0a2, 0x202a0884, 0xb8163d85, 0x9e56e7bd, 0xb0286076, 0x2a73b67, 0x9bdb2cb2, 0x89e37a4c, 0x1b30a9ad, 0xc5c8fe, 0x47daf560, 0xf3816f95, 0xc6b60072, 0xe7c86d7d, 0xe3e1f05c, 0xcbc47d47, 0x82b6a2dc, 0xea4f6aef, 0xb738a299, 0x25434de9, 0x13e950f7, 0x2860ff61, 0x9d849401, 0x3008a10d, 0xd67a5074, 0x9f5be426, 0xb22d68d5, 0xe7e3219b, 0x8e185ea6, 0xfd6db3d4, 0xdc76eca1, 0xb60c1f01, 0xbecd63fe, 0xbb57459f, 0x43b980f5, 0xe8c77071, 0xfff0de72, 0x669fa926, 0x92e0181c, 0x3ff636cb, 0xa3995e72, 0x2c65eb63, 0x7d5cf41f, 0x1e94bcb3, 0xe3ae1042, 0xd0073f43, 0xdfdfe7a0, 0x25942f4a, 0xd908c3a0, 0x43a8ffe1, 0xa5d13b05, 0xd1afd400, 0x95e87ba5, 0x4f82a56e, 0x4815cf48, 0xfb7fb5ab, 0xfddd096c, 0x44426f18, 0xccb69890, 0x889d817d, 0x806b3b60, 0x5080e8e0, 0xc5b67529, 0xe9286898, 0x1fd0d115, 0x5dd6a7f9, 0xebc7d39b, 0x6effe82e, 0xb7a6923, 0x83259d3e, 0x3a85d844, 0xf05add3e, 0xd7ad2f7d, 0x7ec4620, 0x4e39f0f9, 0xb7855c2d, 0x7bfc7f58, 0xe419d166, 0xa669e973, 0x6fc4baa, 0x24d97039, 0x85a52699, 0x4e48cb20, 0x53741168, 0xe30d3821, 0xdc077df6, 0xe3081286, 0x8efaf0c1, 0x83e53d33, 0xb0b2c61f, 0x445fd987, 0x73ee34fb, 0xe15e308d, 0xa0d8dc7f, 0x7f7bd583, 0x4a43c99c, 0x555c468f, 0x264ab1d, 0xe50ad642, 0x93a646ef, 0x3459003d, 0x4fbaced3, 0xd1d19c60, 0x846ba63a, 0xd6be13d2, 0xea9992e8, 0x85d5f5fa, 0x6d2d73a2, 0x2974c31e, 0x3f5558b9, 0xf2f02860, 0x5f0d1bb1, 0xf380dfc, 0xee8e732e, 0xe2f1a153, 0xefd69b29, 0x93083914, 0xd82601f8, 0x60fc1c28, 0xeb92a778, 0xa4125dfe, 0x3a57ac6e, 0x20b7f5b2]);\n\n    testArray([0xd930680f, 0x1334b65d, 0x19aa455c, 0xfae4429], [0xe8336da6, 0xdfea0fee, 0x375775b8, 0xa513cc7, 0x5b700dce, 0xe37faac7, 0x4b364eca, 0x7b7ad6e1, 0x95bf24b4, 0x1bcfeced, 0x35a97d0, 0xd2a31582, 0x7ec27cf, 0x7a9175e5, 0x86d515f3, 0x430ea031]);\n    testArray([0x1234, 0x2345, 0x3456, 0x4567], [0x7a422abd, 0xd48bc506, 0x53454c8b, 0x1126affe, 0x5e471e42, 0xd9621c51, 0x1a3525c, 0xa29c2837, 0x363c307d, 0xdadc88a6, 0x825f582e, 0xa9d0c112, 0x4ccc4b24, 0x915b4faa, 0xab952efe, 0xaf798601]);\n    testArray([0x2cfc5537, 0x1b17526d, 0x69f97a02, 0x7b2f9891], [0x570ae143, 0xf7d00324, 0xfa6fcf8b, 0xe1e08c63, 0xa5a5c4cd, 0xaabebadf, 0x7db637d9, 0x18189b01, 0x6024d03b, 0xd4c39ae6, 0x42797b3e, 0xc3a55da4, 0x1e56d432, 0x4851a7f3, 0x6a4fa9cd, 0x7be3b0a2]);\n    testArray([0xa9990a6f, 0xdaaf2865, 0x36ccb58, 0xb667cbfe], [0x85640639, 0xbd705238, 0x7bb3a007, 0x4f3e1b92, 0xf553dad5, 0x325dd4c1, 0xe4eabfe5, 0x315e51f2, 0xe211075f, 0xcdfe712f, 0xbe24fa07, 0x5d2f6ee, 0x6a249a99, 0x5e9683f3, 0xfc2d9d4c, 0x24ef6118]);\n    testArray([0xca6e67d8, 0xb9286516, 0x8828562, 0xa2defcf6, 0x82ba5f3f, 0x8f6c0a5f, 0x56b90246, 0xe9d0cbfa], [0x7a7b1750, 0x30f96caf, 0x4f6e5056, 0x3db7508a, 0x825a5289, 0xa6ae4d28, 0x8a3802ff, 0x945d7aa3, 0x7f3f8c06, 0x48eb0e69, 0xbefe6eb2, 0x75ec576f, 0x1bbacdaa, 0x6efe5acc, 0x98e8a667, 0xf16633ff]);\n    testArray([0xda40418c, 0x4dd1b680, 0x6da0160d, 0xea2f8c00, 0xfab513e5, 0xd86980fe, 0x99162236, 0xccef50d1], [0x860a91ea, 0x3c842673, 0xcb91498d, 0x4a68a854, 0x666f29a3, 0x253dbae6, 0x16796646, 0x6a8fddc5, 0xead31993, 0xaceb1665, 0x200ea484, 0xf3bf21c7, 0xe2543cf4, 0xda188548, 0x9b71dcaf, 0xcee06122]);\n    testArray([0xcd1f7b1, 0x6b7a2d23], [0xc41d290, 0x2a01cf19, 0x3280f35f, 0xddfbed6a, 0xedee289b, 0x222b2367, 0xf2dae262, 0x3370df25, 0x3e893999, 0xbcb5d93b, 0x1eee9a97, 0x3527335e, 0x2ffa88d1, 0xbde2e1f3, 0xaf945f67, 0x46f1739a]);\n    testArray([0xd8ccf3fd, 0xed85db28], [0xea402254, 0x4be695cf, 0x159a6f84, 0x1d0e68ca, 0x4c787dba, 0x69717c12, 0xd18f1aaa, 0xc6f8ee84, 0x9fde16af, 0xb120f696, 0x26a47477, 0xb81d4f0a, 0x5616de6c, 0x1101efdb, 0xf0dcfbe4, 0xff350f41]);\n\n    test(0x1, [0x75c24bc2, 0x4330b935, 0x8080568a, 0x8fd8c12, 0x863a41de, 0x184fe782, 0x6c3217be, 0xb00e264, 0x47ee6a1f, 0xe2a71a3b, 0xa42cd40d, 0xac9d4f88, 0xa2694266, 0xa2c0b37b, 0xda5a54d7, 0x7ebf22bb], 1000000);\n    test(0x12345678, [0x1a843c4b, 0x77feca9d, 0x78f045ab, 0x63fb95d0, 0x4a26807d, 0x2de39aed, 0xc549be4b, 0x71adac91, 0xbded7218, 0xdaade893, 0x1d69c9c1, 0xa2c4f153, 0x88841d1a, 0x50d67900, 0x43e90fa6, 0xa0c706c], 1000000);\n    test(0xa859ea05, [0x2d764ce1, 0xb79c423e, 0x7e4d9909, 0x7b7a2098, 0xdc8b61bb, 0xf5357aeb, 0xabcfd521, 0x9ba49331, 0x1ed7a6b5, 0xf9d8110b, 0xbd4494de, 0xe58cc2e5, 0x3e18ce79, 0x88074f39, 0xd5f13134, 0xd8583007], 1000000);\n    test(0xe906a042, [0x58f427b7, 0x24ce2e63, 0x150fecd, 0x670a0316, 0x10d91dcb, 0xdc961a07, 0x96833126, 0x57a3221, 0x17fa7814, 0x38617d98, 0x2bfbae67, 0x4973b6ca, 0xac2cf2e2, 0x26c31922, 0xd8e37427, 0x854f5b24], 1000000);\n    test(0x1c8c67df, [0x853d9eb0, 0xa8f3e136, 0xa381927e, 0x411164b6, 0xa32a5ac8, 0x58214288, 0xacd4d3eb, 0xa2a92c81, 0xb425a8f8, 0xfb21e2f7, 0xd4427e34, 0x2051e3d5, 0x6a44d73f, 0x4c942513, 0x755bbe4f, 0xa2ee1587], 1000000);\n    test(0x397e437, [0x475e0fd0, 0xb7352b5a, 0xf1f3fe70, 0x955304b0, 0x459c0b21, 0x41f1e13c, 0x97b92317, 0xdad128b3, 0xeae85768, 0x3f3e3d08, 0x3fb2df1c, 0xb85da862, 0x3e8799a9, 0xc2b00386, 0xae0573bb, 0x36c641a9], 1000000);\n\n    testArray([0x10cd7cbe, 0xa90b3040], [0x97bf6355, 0xab1bf842, 0x82ee8b4c, 0x8fe45605, 0x624efd53, 0x361b95d8, 0x861e0c3f, 0x80cf514d, 0x61174569, 0x2eca5151, 0x5a53d78f, 0x54f48e5f, 0x5e4bac3, 0x1958bc37, 0xfc0d6736, 0xaa47d9dc], 1000000);\n    testArray([0xd036b7f3, 0x1775082e], [0x35f5c874, 0xf8f1b9eb, 0x13fb4629, 0xdd9ea347, 0x2c5cc50, 0x7a607b2a, 0x12b44309, 0x4f80c0c0, 0x346ebd92, 0x9bc61c1b, 0x48b8b08c, 0x3663cb5, 0x6aef614a, 0x11ef1adf, 0x26d423ca, 0x7d0e77c5], 1000000);\n    testArray([0x11aded04, 0x8f5d4242, 0x53b4dd38, 0xdf64d789], [0x599c4343, 0xae2a4d3e, 0x71abb9b1, 0xee1a2ac4, 0x8257fed1, 0x87b2544e, 0xd7576e47, 0x2f5a55fd, 0xa7c40d53, 0x4a01078d, 0x3ee20d96, 0xbcc673fe, 0xffc2fa4e, 0x9eda95ca, 0xe06a868c, 0xf382542e], 1000000);\n    testArray([0x57ef9b89, 0x381c2de5, 0xdd56ff9e, 0xe94f3279], [0xaa3a47e6, 0x9ad7e49f, 0xddacdcd2, 0x7af6988b, 0xa9894b8f, 0x38926151, 0xdbad2e5f, 0x7d598e3a, 0xc230300e, 0xfafccbad, 0x7f39347c, 0x79deee2e, 0xf3f09de4, 0x21fa695b, 0x457ace3c, 0x3a2613da], 1000000);\n    testArray([0xc4f5638, 0x9c81aef4, 0x8cd3091d, 0x12d5160a], [0x566178b9, 0x96c41b7, 0xd4ab9f2b, 0x6420a26, 0x214ebdfb, 0xa95f6418, 0x9544fb2d, 0xf73413e8, 0xa0095c75, 0x1047500f, 0x59867add, 0xa478b2e1, 0x7ea93c01, 0xb2fa9ec3, 0x559095a4, 0x984447b4], 1000000);\n    testArray([0xa6db0297, 0x16afeb6, 0x340be4b4, 0x930b3922], [0xb0885d11, 0xb445e8e9, 0xc725c250, 0xe96ea2c1, 0x1aa513a5, 0x3b101e51, 0xd3d4b908, 0xfaee614e, 0x2541ee94, 0x239e8c7e, 0xae7e9de7, 0xfa9fdbdc, 0xff4d8b58, 0x9b06f428, 0xb9ca9090, 0xc9e805c0], 1000000);\n\n    test(0x1, [0xff4780eb, 0xb8672f8c, 0xeebc1448, 0x77eff, 0x20ccc389, 0x4d65aacb, 0xffc11e85, 0x2591cb4f, 0x3c7053c0, 0x17a38090, 0x65865081, 0x2faebfcc, 0x634e1e47, 0x5876aaed, 0xab7479fc, 0x65928d86, 0xef7f7d19, 0x89efe4b2, 0xd8a7d514, 0x6b5054fe, 0x5032b165, 0xaf6a8b92, 0x8648c9d4, 0x3456fb8b, 0x718620fc, 0xe0cc4dea, 0x3ac5929c, 0x702df9d, 0x88cf598e, 0xaba3c232, 0xe9f96a44, 0x6ad47cd7, 0x750b5fd7, 0x8f064be9, 0x6e4242f1, 0x23f065f7, 0xf06aadde, 0x32b6c760, 0xc7448456, 0xccfd988d, 0xb749d7e9, 0xf7dffd89, 0xcd818407, 0x503c913f, 0x17c1cb3d, 0xb13c0e16, 0x84a5a539, 0xe05b0a01, 0xdd71f780, 0xe504f13c, 0xd442f8d1, 0x15c57508, 0xd460e2d8, 0x9ff7e8d, 0x45e69a73, 0x2b7a01af, 0xf2a8fea, 0xe0cdf279, 0xaba7b9c8, 0x192d421e, 0x97d32447, 0x6bcdb583, 0xabf185c6, 0xf5383f95, 0x696aee31, 0x887d8539, 0x3292b203, 0xb11edbc4, 0x4a252b18, 0x50c5a1f1, 0x2461fc2b, 0xafbe864c, 0xc8874c1a, 0xd5aa0734, 0x699c2550, 0x4ae8a6d, 0x8bf7373, 0xc0097529, 0x9fc06dd2, 0xfd26000f, 0xa91f6c40, 0xbf87c8c4, 0x4c6a3019, 0x47cb2d6f, 0x7235dee2, 0xca0e35d7, 0x38dd2787, 0x1a6d051a, 0x12c7fe99, 0x72a92668, 0x78200416, 0xe899b709, 0x189ebec3, 0x4b2a4be7, 0xe743447e, 0x49aba517, 0x1e96ed7d, 0x21498d64, 0x8659409b, 0x4f53ba5, 0x15685139, 0xadc82a53, 0xeab76ca6, 0x362d4288, 0xe9132520, 0x43fadda2, 0x4c86af0a, 0x7dd7bd17, 0x959a868f, 0xda92aef, 0x90df9c57, 0x92f95f19, 0x9d2b0fc7, 0x259000f3, 0xf4df855c, 0x96dcba4a, 0x42cf84be, 0xb3235d2e, 0x3b23d3a0, 0x1a3296d8, 0x88901497, 0x69ff92b7, 0xf32f2541, 0xb1c43571, 0x7e39274d, 0x6a07a703, 0x8a64cb80, 0xcc9bff8, 0xc3f6d4fd, 0x893081cd, 0xb9bc706, 0xa9ee7234, 0x23d4d1d5, 0x83cfc5c6, 0xcadaf602, 0xf1d0f64c, 0x7a10fdb, 0x96287895, 0xe21482cb, 0xe7455907, 0x8a71184d, 0x23318ac8, 0x72aed44b, 0x23a79d4c, 0xe463042b, 0xceb13214, 0x60a95e1e, 0x65ce2624, 0x89d63367, 0x2a54a707, 0xa6fd0f2d, 0xed7133c4, 0x5c7b9a39, 0x59072ef0, 0x922d9dfc, 0xc03538d2, 0xa3494060, 0xb9db010d, 0x20562c0a, 0xe2205917, 0xb0b13f7c, 0x9fa8fb51, 0xa5d2e787, 0xc03dc379, 0x5a9bc098, 0x595166ca, 0xc3633ddc, 0x4519fe94, 0x5b45a9a0, 0xe558cc8c, 0xc0b6bcc1, 0x6d97625e, 0xe19f9e3c, 0xf6ffc1e9, 0x2fcc098, 0xa9d74d52, 0x7f841373, 0x9f277361, 0x12e40882, 0x1d5ffdec, 0xc975a6dc, 0xf311ba67, 0x1066b762, 0x732d710a, 0x5af59eb6, 0x94115760, 0xf11c39e9, 0x687ba752, 0x613ac9d6, 0x3cadccc6, 0xc34ebac2, 0xe743e147, 0xc5873fe7, 0x92dca8b0, 0x4d25f636, 0xbc1c0f, 0xc5d23b85, 0x9dfd3591, 0x272668aa, 0x539f0014, 0x94215a76, 0x86ed47b0, 0x24e5916, 0xe2cd19e5, 0xb583cf8d, 0x5b7607f1, 0x787bea72, 0xe895c261, 0xc3bc56b5, 0x9f948754, 0x77a70c0a, 0x40cdc60, 0x44dd40b7, 0xedef993d, 0xd4e9ce38, 0xb0de9ed9, 0x8d23a195, 0xff508ce7, 0x11f0dc60, 0x2c1e81f9, 0x78f41fd3, 0x231b5419, 0xbe25d5f1, 0xeebe938e, 0x3124088d, 0xb262acd4, 0x76dd1e74, 0x10e5632b, 0x3af90e86, 0xc16606cd, 0x821c82b8, 0xc0fe07bb, 0x3564bb8f, 0xec4b5618, 0xc9f33fb, 0xb6267c89, 0x84d421c2, 0x1fd038c7, 0x2c1a6f35, 0x516dd45, 0x6574c9a4, 0x6b5c365, 0x1b7c4af8, 0x73f1815, 0x8282ed28, 0x3f07b04d, 0x1a2588db, 0xdc2acab1, 0x49e96971, 0x89f0d52f, 0x3b5485cd, 0x8d85bda8, 0xf7b915ce, 0xd78f562d, 0x473fe757, 0x1fc9d290, 0x3bceaf9c, 0x477894ea, 0x17703e2d, 0x95f451c3, 0x91efe374, 0xf8376d42, 0x6afd3bce, 0x8f9fad2e, 0x5e2af980, 0x4c6119d, 0xd020703f, 0xccf6434b, 0x4a2db623, 0x3ba433b5, 0xb7a6f9dd, 0xce9e7221, 0x9cea2a82, 0x634ad5d4, 0x6d49f653, 0xdd111430, 0xc07abf36, 0xbf435d20, 0x6d8520fd, 0x8e65c29c, 0x6daa7837, 0x22eebad2, 0x5ca5c51f, 0xf56c41c, 0x274130de, 0x1f105d4a, 0xefebb488, 0xb67c06d, 0xea99d663, 0x1b84bc20, 0xc82e6e08, 0x39c81654, 0x9dc7bbcd, 0xb6867232, 0x937424f, 0x8f499ca9, 0xa781c340, 0x336de6c, 0x213894d3, 0x126ce818, 0x4b5b2471, 0xf79f6bea, 0x5c5e5b14, 0x916f082c, 0x464f250f, 0x340b069e, 0x12efa1db, 0x40986b8e, 0x26f275f3, 0xbe6b5f13, 0x295fd4fb, 0x3207aa9a, 0xf04f68eb, 0x94d3f056, 0x5f02a187, 0xf8533ae3, 0xccdfc35, 0xd8c9c5af, 0xbdaf436e, 0x3d66a9bc, 0x4c764ef3, 0x7e67b122, 0x3450d064, 0x9eb56ae4, 0xfb546720, 0xd4381793, 0xe49d09c3, 0x28237b18, 0xc264aed3, 0x4c168e5, 0xa6afd65e, 0x11ecf8a6, 0xa28b2af, 0x7c811ce7, 0xd05a3385, 0x9b38684f, 0xc337fe3f, 0x91a03f71, 0x748d6457, 0x513ea9a0, 0x8825c72a, 0xfd15f2ca, 0x1bfd72c2, 0x946a2ed8, 0x256266e2, 0x6150ee9e, 0x823ffa91, 0x8d0af144, 0x3734db40, 0xbece3cbc, 0xea9c0df4, 0xab52d8ce, 0x764fa091, 0x43d1c4a7, 0x21dc44a3, 0x10fb51d1, 0xc3a5569c, 0x5ebdd696, 0x3675b726, 0xa1352aa9, 0x130299ca, 0x35cdf6cd, 0x186d6546, 0xc0b49699, 0x29864ce6, 0x110888f0, 0x5b413430, 0x42a402b2, 0x186617be, 0xce04652c, 0x24ace269, 0x3184e8b6, 0xee56dd00, 0xa3b3b556, 0x939b05f7, 0x8650cb10, 0xd6f2fd13, 0xecc03709, 0x9f901270, 0x43676adc, 0x53139433, 0x10e2d36f, 0xba5ef88a, 0xbc2d487b, 0x85d21144, 0xc5ad7597, 0xbc9fad0e, 0xe8669ebf, 0x2a580e15, 0xee95b8ae, 0xafe30d7c, 0x3925483, 0x6d4379b8, 0x3bff2758, 0xba82bcd0, 0x9de52fae, 0xc19f3236, 0xf2f2bbcf, 0x65c9da47, 0xf33ebdfc, 0xecd9ea0e, 0x8e80d2cd, 0x3419408f, 0xea652d99, 0x20c7735, 0xa43daed4, 0xed2551f9, 0x63d78bba, 0x4b651bd5, 0x7c69e272, 0x2abd56ee, 0x9ab4179d, 0x62b862c, 0x8caf2c25, 0x73b66096, 0xed1a39db, 0xceef49b6, 0xeb321d4c, 0x5e4df20c, 0x65169178, 0x9bf4fd3b, 0xf6985f9a, 0x8ebc7cc, 0x2c885bc7, 0x5ac592d7, 0x205721a7, 0x1419e27d, 0x22948c2b, 0xb17495cc, 0x81731372, 0x3412326, 0x582a65b, 0x75a4c270, 0xf2ae2cfd, 0xf618e345, 0xd3bdd6e2, 0x558d29a1, 0x3d848ab, 0x78da759a, 0x2d1b32b8, 0x1afaebc5, 0x55021e49, 0x80c99534, 0x21890259, 0xe2bc921b, 0xcf3ac82b, 0x88ccf401, 0x5840a952, 0x480edc7f, 0xf0aae25e, 0x5ac60fe0, 0x94fee19a, 0xe5729f54, 0xe0fb221e, 0x3dd23b67, 0xd8408440, 0x61d4496, 0xe7c7ca62, 0xf739df34, 0x75bab683, 0x6e126046, 0x8bdd628c, 0x58a65d27, 0xcc7148e6, 0x93bab453, 0x4924deef, 0x206404b0, 0x7d81413d, 0xf33609c6, 0x995f4b0d, 0x5048cca4, 0x3f9fd17, 0xf3ecbd96, 0x97ee65c2, 0x37e89e7a, 0x6f0569dc, 0x3faad0f9, 0xceaf2dea, 0xdd221d5f, 0x50b3e235, 0x3c3a8b89, 0xe4945aa9, 0xd0aa65b9, 0x93ee7358, 0x8b3cd96d, 0x2f1b4af6, 0x30f66edd, 0xc9b5baf4, 0x96be36cc, 0x9cae1352, 0xc52b16a, 0xdccff8b, 0x4104069, 0x6b91d024, 0xcb9dc70, 0xadd77490, 0x6640149e, 0xeb297c73, 0x93affa6a, 0x1a58d4, 0xde159fb9, 0xfa0ce323, 0xc941eda9, 0x60679151, 0x41343302, 0xf949e0d5, 0x150ea85d, 0x9aceaca4, 0x2862b26d, 0xd42f3d2e, 0x35a15350, 0x93204b1b, 0x6ad99948, 0xa0c99a1c, 0x59023682, 0x491b86e3, 0xb32b998d, 0x963ab5a9, 0xb28ffb79, 0xc0016d24, 0x13211ae4, 0xdbba74a8, 0x9561412, 0xc14d10e1, 0xca161ba6, 0xb2b3e13f, 0xe68909f3, 0xdd4e862e, 0x1319d68, 0x529b38d9, 0x43a2d3e7, 0xabb8d070, 0x77a609ff, 0x736c7965, 0x5c1cea02, 0x61d17c62, 0x3d7ee71c, 0x692aeece, 0x5ee62cb, 0x66c75dba, 0x881b66aa, 0x5140131a, 0x215470e8, 0x9f361b95, 0x8fbbc63a, 0x6e24af7f, 0x2af6f590, 0xf94b17dc, 0x6bcb8e25, 0xad845be9, 0xaf47b4ed, 0x32d579e8, 0x461e54ea, 0x6d3c470b, 0x28f5796, 0x57e58a06, 0x38492860, 0xcc320e8e, 0x82e4864, 0xe1479157, 0xef53c8cb, 0xe7622fa3, 0xc8372ebf, 0xa9a8017b, 0x84810a20, 0x452c5e6e, 0x436e75b, 0x409b1ab1, 0x4c7e2be6, 0xdada977a, 0x8a6c9880, 0x87184e96, 0xdc215461, 0xcd5a6dc6, 0x2f63a6a4, 0x928e9b92, 0x15634b1b, 0xbbaf3a9c, 0xb556de5, 0x84ddf234, 0x719d6666, 0xc558a5f2, 0x4f212de, 0x91a0ad79, 0x11290332, 0x7738c32e, 0xcfd04207, 0x57ba75d5, 0xa2e3f110, 0x11762ae7, 0xc5d9869d, 0x60bfa38b, 0xb4a795bd, 0x14625ffb, 0x3cfb63fa, 0xfb99e70e, 0xb5ef968, 0x2e7e2e1e, 0x47fdd488, 0xcfd5f8a8, 0xdd7683b0, 0xdffd7c9e, 0x12b83597, 0xb03bd9c2, 0xa90b82dc, 0x91ca62c0, 0x2ff80ae7, 0x29356c8c, 0x85b49291, 0x778572fa, 0xe764a1a1, 0x585d320a, 0x79a39c1c, 0x399c37e9, 0xd8d673cb, 0x97aedb85, 0xd6ba3f51, 0x4ff0ea85, 0x23a7db79, 0xea93002a, 0x8a516656, 0xe8dddfb4, 0x7792e739, 0x41d28138, 0x37fb9a4e, 0x1c635f57, 0x70da1ffa, 0x31660175, 0x7af382d1, 0x7fe4bf8a, 0x55521ec8, 0xba849730, 0x24819f5, 0x354c3b13, 0x8166158c, 0x3f7f2099, 0xac53614d, 0xda072b10, 0xe329504, 0x6a750fd8, 0x28572376, 0x9ddf129b, 0x9ae80bb2, 0x3bd18b44, 0x51b8a683, 0x1a1a86ba, 0xe3f8ee0c, 0x840f3482, 0xca55eb4c, 0x7a25e960, 0x37ae0760, 0x27157d3d, 0x3340e58f, 0x9f2eb164, 0xae3151fa, 0x8b443f4a, 0x27fdd38c, 0xa7758b92, 0x82a7049e, 0x2500efbb, 0xfcf1ce85, 0xc0642090, 0x250a875f, 0x38d83660, 0xc5d63bc, 0x84f43dab, 0xe6290eec, 0xc909291f, 0xb71fd6eb, 0x5b77263, 0x4f71a52c, 0x53096b18, 0x6497bbbe, 0xdf77d74f, 0x14ae3e15, 0xd83ee393, 0x5a249f4d, 0x89d73e21, 0x426804, 0xddda0a27, 0x9fe7c87c, 0xf3267c43, 0x3344fca2, 0xd38f68a2, 0xa007502a, 0xdaa74f4e, 0x524aaad2, 0x19473f66, 0xc1d0c26, 0xa6bbe17a, 0xb92e6eb0, 0xb419b07a, 0xc25e56d1, 0x9c38bdfe, 0x68038f05, 0xccb395fa, 0xb44f4ce6, 0x8d9a8db, 0x95da19f5, 0xc52e5d88, 0xf8356128, 0xbb5290c5, 0x4dcafa05, 0x427b9807, 0x505245ce, 0x41cf4b25, 0x39f96369, 0xa1dea14e, 0xac1e1e21, 0x58656a1b, 0xc76772b3, 0xcbed3c4d, 0x833dcc1e, 0x7236a3ab, 0x9d8200ae, 0xc8624409, 0xbb07343, 0xfd8f8f03, 0x723393c3, 0x4cdd1336, 0xf7cfad61, 0x249c07bf, 0x5c0c24e3, 0xe6bc2650, 0x8dd50d1c, 0x8aa3a2a5, 0x694e85c0, 0xf98895a5, 0xf74ed3dd, 0xa2f88192, 0x33fb994e, 0xfe711567, 0xfe29e1c6, 0x8bcb4bdc, 0xa8c15434, 0x86c3d98a, 0xcf1fafa0, 0x22ab672e, 0x7549603f, 0x5b0f7e7b, 0xe3269edd, 0x6b64292, 0x88afeba4, 0x290fa89d, 0x93c895f8, 0xbee21427, 0xeae12b1c, 0x7c84636, 0x506be81d, 0x5dd5c4b7, 0xb9e43567, 0xdcc2b95a, 0xce23ef9b, 0xb15353bc, 0x7ae5676a, 0xb0e1958c, 0x7cd1ac91, 0x304a8047, 0xd766a65b, 0x7120a387, 0x8e370d7c, 0x94e241d3, 0x4516f0b8, 0xfd605e33, 0x7c9b2ba0, 0x343332cc, 0x469dd63e, 0x3f6b6c66, 0x39b330b3, 0x431dc660, 0xa591aa1e, 0xc00b4c96, 0xebcf6905, 0x74fc55db, 0x3352505f, 0xe92ed69, 0xe13e0d96, 0x822e1ecc, 0x773f2c74, 0x3643056d, 0xb9984c16, 0xcc7153e6, 0x4d88f992, 0x4c1de8dd, 0x7d2f951d, 0x7113012, 0x34240034, 0x97eb307a, 0x16af8e1f, 0xd805ed31, 0x2a6aa2e2, 0x618a45d3, 0x80c46179, 0xbff6b6dd, 0xc99ee8ad, 0x82da2aeb, 0xe75273b3, 0x8a7bd156, 0x3832bb0f, 0xf59d7cc7, 0xbcf626b0, 0xcdd0619c, 0x41ff5ed3, 0x846531b, 0x906ffbfd, 0xb59a672b, 0x21e6e893, 0x770a564f, 0x5f412346, 0xf2929158, 0x153603fa, 0x38afd0d6, 0x8177460b, 0x445ed4e5, 0xb1c4a5c1, 0x14db7a5d, 0x74fc810f, 0x6db9f6b3, 0x5c7c7fe2, 0x1be8a756, 0xd0e5de2d, 0xa23fd973, 0xbba4dbf, 0xcd8effaa, 0x6348ae96, 0xb261846d, 0x7561c667, 0xc4266dd2, 0xbc58f0a8, 0x57ab12ac, 0xe8ddf790, 0xd889b911, 0x47040b6b, 0x6dc3ca58, 0xd15944e6, 0xd2f24f80, 0xa80450f0, 0xa0620d61, 0x2e34452, 0x24b75f77, 0xbc4023c7, 0x141129f4, 0x9a7ea00e, 0x4b172a4, 0xae15bc1a, 0x1114e3a0, 0x957e6381, 0x7565bfb0, 0x92d24558, 0x1d03f9f5, 0x5c6ba416, 0x71ccf22, 0xf56d5b5e, 0xc13e9a15, 0xfca848c4, 0x6514ebc3, 0x631b4eb0, 0xbf375c76, 0xd60fe492, 0x73d0cd61, 0xfb6dae8b, 0x7338e28b, 0x95d9b179, 0x7a62f5b4, 0xabc2334c, 0x79585244, 0x1614e8ad, 0xcd9c1cc0, 0xfdcfb459, 0x67033228, 0xc78d5307, 0xe7998307, 0xfe8eb0f6, 0x97cd521, 0xa758363a, 0xc61ca107, 0x994e0a2, 0x202a0884, 0xb8163d85, 0x9e56e7bd, 0xb0286076, 0x2a73b67, 0x9bdb2cb2, 0x89e37a4c, 0x1b30a9ad, 0xc5c8fe, 0x47daf560, 0xf3816f95, 0xc6b60072, 0xe7c86d7d, 0xe3e1f05c, 0xcbc47d47, 0x82b6a2dc, 0xea4f6aef, 0xb738a299, 0x25434de9, 0x13e950f7, 0x2860ff61, 0x9d849401, 0x3008a10d, 0xd67a5074, 0x9f5be426, 0xb22d68d5, 0xe7e3219b, 0x8e185ea6, 0xfd6db3d4, 0xdc76eca1, 0xb60c1f01, 0xbecd63fe, 0xbb57459f, 0x43b980f5, 0xe8c77071, 0xfff0de72, 0x669fa926, 0x92e0181c, 0x3ff636cb, 0xa3995e72, 0x2c65eb63, 0x7d5cf41f, 0x1e94bcb3, 0xe3ae1042, 0xd0073f43, 0xdfdfe7a0, 0x25942f4a, 0xd908c3a0, 0x43a8ffe1, 0xa5d13b05, 0xd1afd400, 0x95e87ba5, 0x4f82a56e, 0x4815cf48, 0xfb7fb5ab, 0xfddd096c, 0x44426f18, 0xccb69890, 0x889d817d, 0x806b3b60, 0x5080e8e0, 0xc5b67529, 0xe9286898, 0x1fd0d115, 0x5dd6a7f9, 0xebc7d39b, 0x6effe82e, 0xb7a6923, 0x83259d3e, 0x3a85d844, 0xf05add3e, 0xd7ad2f7d, 0x7ec4620, 0x4e39f0f9, 0xb7855c2d, 0x7bfc7f58, 0xe419d166, 0xa669e973, 0x6fc4baa, 0x24d97039, 0x85a52699, 0x4e48cb20, 0x53741168, 0xe30d3821, 0xdc077df6, 0xe3081286, 0x8efaf0c1, 0x83e53d33, 0xb0b2c61f, 0x445fd987, 0x73ee34fb, 0xe15e308d, 0xa0d8dc7f, 0x7f7bd583, 0x4a43c99c, 0x555c468f, 0x264ab1d, 0xe50ad642, 0x93a646ef, 0x3459003d, 0x4fbaced3, 0xd1d19c60, 0x846ba63a, 0xd6be13d2, 0xea9992e8, 0x85d5f5fa, 0x6d2d73a2, 0x2974c31e, 0x3f5558b9, 0xf2f02860, 0x5f0d1bb1, 0xf380dfc, 0xee8e732e, 0xe2f1a153, 0xefd69b29, 0x93083914, 0xd82601f8, 0x60fc1c28, 0xeb92a778, 0xa4125dfe, 0x3a57ac6e, 0x20b7f5b2], 1);\n    test(0x1, [0xb8672f8c, 0xeebc1448, 0x77eff, 0x20ccc389, 0x4d65aacb, 0xffc11e85, 0x2591cb4f, 0x3c7053c0, 0x17a38090, 0x65865081, 0x2faebfcc, 0x634e1e47, 0x5876aaed, 0xab7479fc, 0x65928d86, 0xef7f7d19, 0x89efe4b2, 0xd8a7d514, 0x6b5054fe, 0x5032b165, 0xaf6a8b92, 0x8648c9d4, 0x3456fb8b, 0x718620fc, 0xe0cc4dea, 0x3ac5929c, 0x702df9d, 0x88cf598e, 0xaba3c232, 0xe9f96a44, 0x6ad47cd7, 0x750b5fd7, 0x8f064be9, 0x6e4242f1, 0x23f065f7, 0xf06aadde, 0x32b6c760, 0xc7448456, 0xccfd988d, 0xb749d7e9, 0xf7dffd89, 0xcd818407, 0x503c913f, 0x17c1cb3d, 0xb13c0e16, 0x84a5a539, 0xe05b0a01, 0xdd71f780, 0xe504f13c, 0xd442f8d1, 0x15c57508, 0xd460e2d8, 0x9ff7e8d, 0x45e69a73, 0x2b7a01af, 0xf2a8fea, 0xe0cdf279, 0xaba7b9c8, 0x192d421e, 0x97d32447, 0x6bcdb583, 0xabf185c6, 0xf5383f95, 0x696aee31, 0x887d8539, 0x3292b203, 0xb11edbc4, 0x4a252b18, 0x50c5a1f1, 0x2461fc2b, 0xafbe864c, 0xc8874c1a, 0xd5aa0734, 0x699c2550, 0x4ae8a6d, 0x8bf7373, 0xc0097529, 0x9fc06dd2, 0xfd26000f, 0xa91f6c40, 0xbf87c8c4, 0x4c6a3019, 0x47cb2d6f, 0x7235dee2, 0xca0e35d7, 0x38dd2787, 0x1a6d051a, 0x12c7fe99, 0x72a92668, 0x78200416, 0xe899b709, 0x189ebec3, 0x4b2a4be7, 0xe743447e, 0x49aba517, 0x1e96ed7d, 0x21498d64, 0x8659409b, 0x4f53ba5, 0x15685139, 0xadc82a53, 0xeab76ca6, 0x362d4288, 0xe9132520, 0x43fadda2, 0x4c86af0a, 0x7dd7bd17, 0x959a868f, 0xda92aef, 0x90df9c57, 0x92f95f19, 0x9d2b0fc7, 0x259000f3, 0xf4df855c, 0x96dcba4a, 0x42cf84be, 0xb3235d2e, 0x3b23d3a0, 0x1a3296d8, 0x88901497, 0x69ff92b7, 0xf32f2541, 0xb1c43571, 0x7e39274d, 0x6a07a703, 0x8a64cb80, 0xcc9bff8, 0xc3f6d4fd, 0x893081cd, 0xb9bc706, 0xa9ee7234, 0x23d4d1d5, 0x83cfc5c6, 0xcadaf602, 0xf1d0f64c, 0x7a10fdb, 0x96287895, 0xe21482cb, 0xe7455907, 0x8a71184d, 0x23318ac8, 0x72aed44b, 0x23a79d4c, 0xe463042b, 0xceb13214, 0x60a95e1e, 0x65ce2624, 0x89d63367, 0x2a54a707, 0xa6fd0f2d, 0xed7133c4, 0x5c7b9a39, 0x59072ef0, 0x922d9dfc, 0xc03538d2, 0xa3494060, 0xb9db010d, 0x20562c0a, 0xe2205917, 0xb0b13f7c, 0x9fa8fb51, 0xa5d2e787, 0xc03dc379, 0x5a9bc098, 0x595166ca, 0xc3633ddc, 0x4519fe94, 0x5b45a9a0, 0xe558cc8c, 0xc0b6bcc1, 0x6d97625e, 0xe19f9e3c, 0xf6ffc1e9, 0x2fcc098, 0xa9d74d52, 0x7f841373, 0x9f277361, 0x12e40882, 0x1d5ffdec, 0xc975a6dc, 0xf311ba67, 0x1066b762, 0x732d710a, 0x5af59eb6, 0x94115760, 0xf11c39e9, 0x687ba752, 0x613ac9d6, 0x3cadccc6, 0xc34ebac2, 0xe743e147, 0xc5873fe7, 0x92dca8b0, 0x4d25f636, 0xbc1c0f, 0xc5d23b85, 0x9dfd3591, 0x272668aa, 0x539f0014, 0x94215a76, 0x86ed47b0, 0x24e5916, 0xe2cd19e5, 0xb583cf8d, 0x5b7607f1, 0x787bea72, 0xe895c261, 0xc3bc56b5, 0x9f948754, 0x77a70c0a, 0x40cdc60, 0x44dd40b7, 0xedef993d, 0xd4e9ce38, 0xb0de9ed9, 0x8d23a195, 0xff508ce7, 0x11f0dc60, 0x2c1e81f9, 0x78f41fd3, 0x231b5419, 0xbe25d5f1, 0xeebe938e, 0x3124088d, 0xb262acd4, 0x76dd1e74, 0x10e5632b, 0x3af90e86, 0xc16606cd, 0x821c82b8, 0xc0fe07bb, 0x3564bb8f, 0xec4b5618, 0xc9f33fb, 0xb6267c89, 0x84d421c2, 0x1fd038c7, 0x2c1a6f35, 0x516dd45, 0x6574c9a4, 0x6b5c365, 0x1b7c4af8, 0x73f1815, 0x8282ed28, 0x3f07b04d, 0x1a2588db, 0xdc2acab1, 0x49e96971, 0x89f0d52f, 0x3b5485cd, 0x8d85bda8, 0xf7b915ce, 0xd78f562d, 0x473fe757, 0x1fc9d290, 0x3bceaf9c, 0x477894ea, 0x17703e2d, 0x95f451c3, 0x91efe374, 0xf8376d42, 0x6afd3bce, 0x8f9fad2e, 0x5e2af980, 0x4c6119d, 0xd020703f, 0xccf6434b, 0x4a2db623, 0x3ba433b5, 0xb7a6f9dd, 0xce9e7221, 0x9cea2a82, 0x634ad5d4, 0x6d49f653, 0xdd111430, 0xc07abf36, 0xbf435d20, 0x6d8520fd, 0x8e65c29c, 0x6daa7837, 0x22eebad2, 0x5ca5c51f, 0xf56c41c, 0x274130de, 0x1f105d4a, 0xefebb488, 0xb67c06d, 0xea99d663, 0x1b84bc20, 0xc82e6e08, 0x39c81654, 0x9dc7bbcd, 0xb6867232, 0x937424f, 0x8f499ca9, 0xa781c340, 0x336de6c, 0x213894d3, 0x126ce818, 0x4b5b2471, 0xf79f6bea, 0x5c5e5b14, 0x916f082c, 0x464f250f, 0x340b069e, 0x12efa1db, 0x40986b8e, 0x26f275f3, 0xbe6b5f13, 0x295fd4fb, 0x3207aa9a, 0xf04f68eb, 0x94d3f056, 0x5f02a187, 0xf8533ae3, 0xccdfc35, 0xd8c9c5af, 0xbdaf436e, 0x3d66a9bc, 0x4c764ef3, 0x7e67b122, 0x3450d064, 0x9eb56ae4, 0xfb546720, 0xd4381793, 0xe49d09c3, 0x28237b18, 0xc264aed3, 0x4c168e5, 0xa6afd65e, 0x11ecf8a6, 0xa28b2af, 0x7c811ce7, 0xd05a3385, 0x9b38684f, 0xc337fe3f, 0x91a03f71, 0x748d6457, 0x513ea9a0, 0x8825c72a, 0xfd15f2ca, 0x1bfd72c2, 0x946a2ed8, 0x256266e2, 0x6150ee9e, 0x823ffa91, 0x8d0af144, 0x3734db40, 0xbece3cbc, 0xea9c0df4, 0xab52d8ce, 0x764fa091, 0x43d1c4a7, 0x21dc44a3, 0x10fb51d1, 0xc3a5569c, 0x5ebdd696, 0x3675b726, 0xa1352aa9, 0x130299ca, 0x35cdf6cd, 0x186d6546, 0xc0b49699, 0x29864ce6, 0x110888f0, 0x5b413430, 0x42a402b2, 0x186617be, 0xce04652c, 0x24ace269, 0x3184e8b6, 0xee56dd00, 0xa3b3b556, 0x939b05f7, 0x8650cb10, 0xd6f2fd13, 0xecc03709, 0x9f901270, 0x43676adc, 0x53139433, 0x10e2d36f, 0xba5ef88a, 0xbc2d487b, 0x85d21144, 0xc5ad7597, 0xbc9fad0e, 0xe8669ebf, 0x2a580e15, 0xee95b8ae, 0xafe30d7c, 0x3925483, 0x6d4379b8, 0x3bff2758, 0xba82bcd0, 0x9de52fae, 0xc19f3236, 0xf2f2bbcf, 0x65c9da47, 0xf33ebdfc, 0xecd9ea0e, 0x8e80d2cd, 0x3419408f, 0xea652d99, 0x20c7735, 0xa43daed4, 0xed2551f9, 0x63d78bba, 0x4b651bd5, 0x7c69e272, 0x2abd56ee, 0x9ab4179d, 0x62b862c, 0x8caf2c25, 0x73b66096, 0xed1a39db, 0xceef49b6, 0xeb321d4c, 0x5e4df20c, 0x65169178, 0x9bf4fd3b, 0xf6985f9a, 0x8ebc7cc, 0x2c885bc7, 0x5ac592d7, 0x205721a7, 0x1419e27d, 0x22948c2b, 0xb17495cc, 0x81731372, 0x3412326, 0x582a65b, 0x75a4c270, 0xf2ae2cfd, 0xf618e345, 0xd3bdd6e2, 0x558d29a1, 0x3d848ab, 0x78da759a, 0x2d1b32b8, 0x1afaebc5, 0x55021e49, 0x80c99534, 0x21890259, 0xe2bc921b, 0xcf3ac82b, 0x88ccf401, 0x5840a952, 0x480edc7f, 0xf0aae25e, 0x5ac60fe0, 0x94fee19a, 0xe5729f54, 0xe0fb221e, 0x3dd23b67, 0xd8408440, 0x61d4496, 0xe7c7ca62, 0xf739df34, 0x75bab683, 0x6e126046, 0x8bdd628c, 0x58a65d27, 0xcc7148e6, 0x93bab453, 0x4924deef, 0x206404b0, 0x7d81413d, 0xf33609c6, 0x995f4b0d, 0x5048cca4, 0x3f9fd17, 0xf3ecbd96, 0x97ee65c2, 0x37e89e7a, 0x6f0569dc, 0x3faad0f9, 0xceaf2dea, 0xdd221d5f, 0x50b3e235, 0x3c3a8b89, 0xe4945aa9, 0xd0aa65b9, 0x93ee7358, 0x8b3cd96d, 0x2f1b4af6, 0x30f66edd, 0xc9b5baf4, 0x96be36cc, 0x9cae1352, 0xc52b16a, 0xdccff8b, 0x4104069, 0x6b91d024, 0xcb9dc70, 0xadd77490, 0x6640149e, 0xeb297c73, 0x93affa6a, 0x1a58d4, 0xde159fb9, 0xfa0ce323, 0xc941eda9, 0x60679151, 0x41343302, 0xf949e0d5, 0x150ea85d, 0x9aceaca4, 0x2862b26d, 0xd42f3d2e, 0x35a15350, 0x93204b1b, 0x6ad99948, 0xa0c99a1c, 0x59023682, 0x491b86e3, 0xb32b998d, 0x963ab5a9, 0xb28ffb79, 0xc0016d24, 0x13211ae4, 0xdbba74a8, 0x9561412, 0xc14d10e1, 0xca161ba6, 0xb2b3e13f, 0xe68909f3, 0xdd4e862e, 0x1319d68, 0x529b38d9, 0x43a2d3e7, 0xabb8d070, 0x77a609ff, 0x736c7965, 0x5c1cea02, 0x61d17c62, 0x3d7ee71c, 0x692aeece, 0x5ee62cb, 0x66c75dba, 0x881b66aa, 0x5140131a, 0x215470e8, 0x9f361b95, 0x8fbbc63a, 0x6e24af7f, 0x2af6f590, 0xf94b17dc, 0x6bcb8e25, 0xad845be9, 0xaf47b4ed, 0x32d579e8, 0x461e54ea, 0x6d3c470b, 0x28f5796, 0x57e58a06, 0x38492860, 0xcc320e8e, 0x82e4864, 0xe1479157, 0xef53c8cb, 0xe7622fa3, 0xc8372ebf, 0xa9a8017b, 0x84810a20, 0x452c5e6e, 0x436e75b, 0x409b1ab1, 0x4c7e2be6, 0xdada977a, 0x8a6c9880, 0x87184e96, 0xdc215461, 0xcd5a6dc6, 0x2f63a6a4, 0x928e9b92, 0x15634b1b, 0xbbaf3a9c, 0xb556de5, 0x84ddf234, 0x719d6666, 0xc558a5f2, 0x4f212de, 0x91a0ad79, 0x11290332, 0x7738c32e, 0xcfd04207, 0x57ba75d5, 0xa2e3f110, 0x11762ae7, 0xc5d9869d, 0x60bfa38b, 0xb4a795bd, 0x14625ffb, 0x3cfb63fa, 0xfb99e70e, 0xb5ef968, 0x2e7e2e1e, 0x47fdd488, 0xcfd5f8a8, 0xdd7683b0, 0xdffd7c9e, 0x12b83597, 0xb03bd9c2, 0xa90b82dc, 0x91ca62c0, 0x2ff80ae7, 0x29356c8c, 0x85b49291, 0x778572fa, 0xe764a1a1, 0x585d320a, 0x79a39c1c, 0x399c37e9, 0xd8d673cb, 0x97aedb85, 0xd6ba3f51, 0x4ff0ea85, 0x23a7db79, 0xea93002a, 0x8a516656, 0xe8dddfb4, 0x7792e739, 0x41d28138, 0x37fb9a4e, 0x1c635f57, 0x70da1ffa, 0x31660175, 0x7af382d1, 0x7fe4bf8a, 0x55521ec8, 0xba849730, 0x24819f5, 0x354c3b13, 0x8166158c, 0x3f7f2099, 0xac53614d, 0xda072b10, 0xe329504, 0x6a750fd8, 0x28572376, 0x9ddf129b, 0x9ae80bb2, 0x3bd18b44, 0x51b8a683, 0x1a1a86ba, 0xe3f8ee0c, 0x840f3482, 0xca55eb4c, 0x7a25e960, 0x37ae0760, 0x27157d3d, 0x3340e58f, 0x9f2eb164, 0xae3151fa, 0x8b443f4a, 0x27fdd38c, 0xa7758b92, 0x82a7049e, 0x2500efbb, 0xfcf1ce85, 0xc0642090, 0x250a875f, 0x38d83660, 0xc5d63bc, 0x84f43dab, 0xe6290eec, 0xc909291f, 0xb71fd6eb, 0x5b77263, 0x4f71a52c, 0x53096b18, 0x6497bbbe, 0xdf77d74f, 0x14ae3e15, 0xd83ee393, 0x5a249f4d, 0x89d73e21, 0x426804, 0xddda0a27, 0x9fe7c87c, 0xf3267c43, 0x3344fca2, 0xd38f68a2, 0xa007502a, 0xdaa74f4e, 0x524aaad2, 0x19473f66, 0xc1d0c26, 0xa6bbe17a, 0xb92e6eb0, 0xb419b07a, 0xc25e56d1, 0x9c38bdfe, 0x68038f05, 0xccb395fa, 0xb44f4ce6, 0x8d9a8db, 0x95da19f5, 0xc52e5d88, 0xf8356128, 0xbb5290c5, 0x4dcafa05, 0x427b9807, 0x505245ce, 0x41cf4b25, 0x39f96369, 0xa1dea14e, 0xac1e1e21, 0x58656a1b, 0xc76772b3, 0xcbed3c4d, 0x833dcc1e, 0x7236a3ab, 0x9d8200ae, 0xc8624409, 0xbb07343, 0xfd8f8f03, 0x723393c3, 0x4cdd1336, 0xf7cfad61, 0x249c07bf, 0x5c0c24e3, 0xe6bc2650, 0x8dd50d1c, 0x8aa3a2a5, 0x694e85c0, 0xf98895a5, 0xf74ed3dd, 0xa2f88192, 0x33fb994e, 0xfe711567, 0xfe29e1c6, 0x8bcb4bdc, 0xa8c15434, 0x86c3d98a, 0xcf1fafa0, 0x22ab672e, 0x7549603f, 0x5b0f7e7b, 0xe3269edd, 0x6b64292, 0x88afeba4, 0x290fa89d, 0x93c895f8, 0xbee21427, 0xeae12b1c, 0x7c84636, 0x506be81d, 0x5dd5c4b7, 0xb9e43567, 0xdcc2b95a, 0xce23ef9b, 0xb15353bc, 0x7ae5676a, 0xb0e1958c, 0x7cd1ac91, 0x304a8047, 0xd766a65b, 0x7120a387, 0x8e370d7c, 0x94e241d3, 0x4516f0b8, 0xfd605e33, 0x7c9b2ba0, 0x343332cc, 0x469dd63e, 0x3f6b6c66, 0x39b330b3, 0x431dc660, 0xa591aa1e, 0xc00b4c96, 0xebcf6905, 0x74fc55db, 0x3352505f, 0xe92ed69, 0xe13e0d96, 0x822e1ecc, 0x773f2c74, 0x3643056d, 0xb9984c16, 0xcc7153e6, 0x4d88f992, 0x4c1de8dd, 0x7d2f951d, 0x7113012, 0x34240034, 0x97eb307a, 0x16af8e1f, 0xd805ed31, 0x2a6aa2e2, 0x618a45d3, 0x80c46179, 0xbff6b6dd, 0xc99ee8ad, 0x82da2aeb, 0xe75273b3, 0x8a7bd156, 0x3832bb0f, 0xf59d7cc7, 0xbcf626b0, 0xcdd0619c, 0x41ff5ed3, 0x846531b, 0x906ffbfd, 0xb59a672b, 0x21e6e893, 0x770a564f, 0x5f412346, 0xf2929158, 0x153603fa, 0x38afd0d6, 0x8177460b, 0x445ed4e5, 0xb1c4a5c1, 0x14db7a5d, 0x74fc810f, 0x6db9f6b3, 0x5c7c7fe2, 0x1be8a756, 0xd0e5de2d, 0xa23fd973, 0xbba4dbf, 0xcd8effaa, 0x6348ae96, 0xb261846d, 0x7561c667, 0xc4266dd2, 0xbc58f0a8, 0x57ab12ac, 0xe8ddf790, 0xd889b911, 0x47040b6b, 0x6dc3ca58, 0xd15944e6, 0xd2f24f80, 0xa80450f0, 0xa0620d61, 0x2e34452, 0x24b75f77, 0xbc4023c7, 0x141129f4, 0x9a7ea00e, 0x4b172a4, 0xae15bc1a, 0x1114e3a0, 0x957e6381, 0x7565bfb0, 0x92d24558, 0x1d03f9f5, 0x5c6ba416, 0x71ccf22, 0xf56d5b5e, 0xc13e9a15, 0xfca848c4, 0x6514ebc3, 0x631b4eb0, 0xbf375c76, 0xd60fe492, 0x73d0cd61, 0xfb6dae8b, 0x7338e28b, 0x95d9b179, 0x7a62f5b4, 0xabc2334c, 0x79585244, 0x1614e8ad, 0xcd9c1cc0, 0xfdcfb459, 0x67033228, 0xc78d5307, 0xe7998307, 0xfe8eb0f6, 0x97cd521, 0xa758363a, 0xc61ca107, 0x994e0a2, 0x202a0884, 0xb8163d85, 0x9e56e7bd, 0xb0286076, 0x2a73b67, 0x9bdb2cb2, 0x89e37a4c, 0x1b30a9ad, 0xc5c8fe, 0x47daf560, 0xf3816f95, 0xc6b60072, 0xe7c86d7d, 0xe3e1f05c, 0xcbc47d47, 0x82b6a2dc, 0xea4f6aef, 0xb738a299, 0x25434de9, 0x13e950f7, 0x2860ff61, 0x9d849401, 0x3008a10d, 0xd67a5074, 0x9f5be426, 0xb22d68d5, 0xe7e3219b, 0x8e185ea6, 0xfd6db3d4, 0xdc76eca1, 0xb60c1f01, 0xbecd63fe, 0xbb57459f, 0x43b980f5, 0xe8c77071, 0xfff0de72, 0x669fa926, 0x92e0181c, 0x3ff636cb, 0xa3995e72, 0x2c65eb63, 0x7d5cf41f, 0x1e94bcb3, 0xe3ae1042, 0xd0073f43, 0xdfdfe7a0, 0x25942f4a, 0xd908c3a0, 0x43a8ffe1, 0xa5d13b05, 0xd1afd400, 0x95e87ba5, 0x4f82a56e, 0x4815cf48, 0xfb7fb5ab, 0xfddd096c, 0x44426f18, 0xccb69890, 0x889d817d, 0x806b3b60, 0x5080e8e0, 0xc5b67529, 0xe9286898, 0x1fd0d115, 0x5dd6a7f9, 0xebc7d39b, 0x6effe82e, 0xb7a6923, 0x83259d3e, 0x3a85d844, 0xf05add3e, 0xd7ad2f7d, 0x7ec4620, 0x4e39f0f9, 0xb7855c2d, 0x7bfc7f58, 0xe419d166, 0xa669e973, 0x6fc4baa, 0x24d97039, 0x85a52699, 0x4e48cb20, 0x53741168, 0xe30d3821, 0xdc077df6, 0xe3081286, 0x8efaf0c1, 0x83e53d33, 0xb0b2c61f, 0x445fd987, 0x73ee34fb, 0xe15e308d, 0xa0d8dc7f, 0x7f7bd583, 0x4a43c99c, 0x555c468f, 0x264ab1d, 0xe50ad642, 0x93a646ef, 0x3459003d, 0x4fbaced3, 0xd1d19c60, 0x846ba63a, 0xd6be13d2, 0xea9992e8, 0x85d5f5fa, 0x6d2d73a2, 0x2974c31e, 0x3f5558b9, 0xf2f02860, 0x5f0d1bb1, 0xf380dfc, 0xee8e732e, 0xe2f1a153, 0xefd69b29, 0x93083914, 0xd82601f8, 0x60fc1c28, 0xeb92a778, 0xa4125dfe, 0x3a57ac6e, 0x20b7f5b2], 2);\n    test(0x1, [0xeebc1448, 0x77eff, 0x20ccc389, 0x4d65aacb, 0xffc11e85, 0x2591cb4f, 0x3c7053c0, 0x17a38090, 0x65865081, 0x2faebfcc, 0x634e1e47, 0x5876aaed, 0xab7479fc, 0x65928d86, 0xef7f7d19, 0x89efe4b2, 0xd8a7d514, 0x6b5054fe, 0x5032b165, 0xaf6a8b92, 0x8648c9d4, 0x3456fb8b, 0x718620fc, 0xe0cc4dea, 0x3ac5929c, 0x702df9d, 0x88cf598e, 0xaba3c232, 0xe9f96a44, 0x6ad47cd7, 0x750b5fd7, 0x8f064be9, 0x6e4242f1, 0x23f065f7, 0xf06aadde, 0x32b6c760, 0xc7448456, 0xccfd988d, 0xb749d7e9, 0xf7dffd89, 0xcd818407, 0x503c913f, 0x17c1cb3d, 0xb13c0e16, 0x84a5a539, 0xe05b0a01, 0xdd71f780, 0xe504f13c, 0xd442f8d1, 0x15c57508, 0xd460e2d8, 0x9ff7e8d, 0x45e69a73, 0x2b7a01af, 0xf2a8fea, 0xe0cdf279, 0xaba7b9c8, 0x192d421e, 0x97d32447, 0x6bcdb583, 0xabf185c6, 0xf5383f95, 0x696aee31, 0x887d8539, 0x3292b203, 0xb11edbc4, 0x4a252b18, 0x50c5a1f1, 0x2461fc2b, 0xafbe864c, 0xc8874c1a, 0xd5aa0734, 0x699c2550, 0x4ae8a6d, 0x8bf7373, 0xc0097529, 0x9fc06dd2, 0xfd26000f, 0xa91f6c40, 0xbf87c8c4, 0x4c6a3019, 0x47cb2d6f, 0x7235dee2, 0xca0e35d7, 0x38dd2787, 0x1a6d051a, 0x12c7fe99, 0x72a92668, 0x78200416, 0xe899b709, 0x189ebec3, 0x4b2a4be7, 0xe743447e, 0x49aba517, 0x1e96ed7d, 0x21498d64, 0x8659409b, 0x4f53ba5, 0x15685139, 0xadc82a53, 0xeab76ca6, 0x362d4288, 0xe9132520, 0x43fadda2, 0x4c86af0a, 0x7dd7bd17, 0x959a868f, 0xda92aef, 0x90df9c57, 0x92f95f19, 0x9d2b0fc7, 0x259000f3, 0xf4df855c, 0x96dcba4a, 0x42cf84be, 0xb3235d2e, 0x3b23d3a0, 0x1a3296d8, 0x88901497, 0x69ff92b7, 0xf32f2541, 0xb1c43571, 0x7e39274d, 0x6a07a703, 0x8a64cb80, 0xcc9bff8, 0xc3f6d4fd, 0x893081cd, 0xb9bc706, 0xa9ee7234, 0x23d4d1d5, 0x83cfc5c6, 0xcadaf602, 0xf1d0f64c, 0x7a10fdb, 0x96287895, 0xe21482cb, 0xe7455907, 0x8a71184d, 0x23318ac8, 0x72aed44b, 0x23a79d4c, 0xe463042b, 0xceb13214, 0x60a95e1e, 0x65ce2624, 0x89d63367, 0x2a54a707, 0xa6fd0f2d, 0xed7133c4, 0x5c7b9a39, 0x59072ef0, 0x922d9dfc, 0xc03538d2, 0xa3494060, 0xb9db010d, 0x20562c0a, 0xe2205917, 0xb0b13f7c, 0x9fa8fb51, 0xa5d2e787, 0xc03dc379, 0x5a9bc098, 0x595166ca, 0xc3633ddc, 0x4519fe94, 0x5b45a9a0, 0xe558cc8c, 0xc0b6bcc1, 0x6d97625e, 0xe19f9e3c, 0xf6ffc1e9, 0x2fcc098, 0xa9d74d52, 0x7f841373, 0x9f277361, 0x12e40882, 0x1d5ffdec, 0xc975a6dc, 0xf311ba67, 0x1066b762, 0x732d710a, 0x5af59eb6, 0x94115760, 0xf11c39e9, 0x687ba752, 0x613ac9d6, 0x3cadccc6, 0xc34ebac2, 0xe743e147, 0xc5873fe7, 0x92dca8b0, 0x4d25f636, 0xbc1c0f, 0xc5d23b85, 0x9dfd3591, 0x272668aa, 0x539f0014, 0x94215a76, 0x86ed47b0, 0x24e5916, 0xe2cd19e5, 0xb583cf8d, 0x5b7607f1, 0x787bea72, 0xe895c261, 0xc3bc56b5, 0x9f948754, 0x77a70c0a, 0x40cdc60, 0x44dd40b7, 0xedef993d, 0xd4e9ce38, 0xb0de9ed9, 0x8d23a195, 0xff508ce7, 0x11f0dc60, 0x2c1e81f9, 0x78f41fd3, 0x231b5419, 0xbe25d5f1, 0xeebe938e, 0x3124088d, 0xb262acd4, 0x76dd1e74, 0x10e5632b, 0x3af90e86, 0xc16606cd, 0x821c82b8, 0xc0fe07bb, 0x3564bb8f, 0xec4b5618, 0xc9f33fb, 0xb6267c89, 0x84d421c2, 0x1fd038c7, 0x2c1a6f35, 0x516dd45, 0x6574c9a4, 0x6b5c365, 0x1b7c4af8, 0x73f1815, 0x8282ed28, 0x3f07b04d, 0x1a2588db, 0xdc2acab1, 0x49e96971, 0x89f0d52f, 0x3b5485cd, 0x8d85bda8, 0xf7b915ce, 0xd78f562d, 0x473fe757, 0x1fc9d290, 0x3bceaf9c, 0x477894ea, 0x17703e2d, 0x95f451c3, 0x91efe374, 0xf8376d42, 0x6afd3bce, 0x8f9fad2e, 0x5e2af980, 0x4c6119d, 0xd020703f, 0xccf6434b, 0x4a2db623, 0x3ba433b5, 0xb7a6f9dd, 0xce9e7221, 0x9cea2a82, 0x634ad5d4, 0x6d49f653, 0xdd111430, 0xc07abf36, 0xbf435d20, 0x6d8520fd, 0x8e65c29c, 0x6daa7837, 0x22eebad2, 0x5ca5c51f, 0xf56c41c, 0x274130de, 0x1f105d4a, 0xefebb488, 0xb67c06d, 0xea99d663, 0x1b84bc20, 0xc82e6e08, 0x39c81654, 0x9dc7bbcd, 0xb6867232, 0x937424f, 0x8f499ca9, 0xa781c340, 0x336de6c, 0x213894d3, 0x126ce818, 0x4b5b2471, 0xf79f6bea, 0x5c5e5b14, 0x916f082c, 0x464f250f, 0x340b069e, 0x12efa1db, 0x40986b8e, 0x26f275f3, 0xbe6b5f13, 0x295fd4fb, 0x3207aa9a, 0xf04f68eb, 0x94d3f056, 0x5f02a187, 0xf8533ae3, 0xccdfc35, 0xd8c9c5af, 0xbdaf436e, 0x3d66a9bc, 0x4c764ef3, 0x7e67b122, 0x3450d064, 0x9eb56ae4, 0xfb546720, 0xd4381793, 0xe49d09c3, 0x28237b18, 0xc264aed3, 0x4c168e5, 0xa6afd65e, 0x11ecf8a6, 0xa28b2af, 0x7c811ce7, 0xd05a3385, 0x9b38684f, 0xc337fe3f, 0x91a03f71, 0x748d6457, 0x513ea9a0, 0x8825c72a, 0xfd15f2ca, 0x1bfd72c2, 0x946a2ed8, 0x256266e2, 0x6150ee9e, 0x823ffa91, 0x8d0af144, 0x3734db40, 0xbece3cbc, 0xea9c0df4, 0xab52d8ce, 0x764fa091, 0x43d1c4a7, 0x21dc44a3, 0x10fb51d1, 0xc3a5569c, 0x5ebdd696, 0x3675b726, 0xa1352aa9, 0x130299ca, 0x35cdf6cd, 0x186d6546, 0xc0b49699, 0x29864ce6, 0x110888f0, 0x5b413430, 0x42a402b2, 0x186617be, 0xce04652c, 0x24ace269, 0x3184e8b6, 0xee56dd00, 0xa3b3b556, 0x939b05f7, 0x8650cb10, 0xd6f2fd13, 0xecc03709, 0x9f901270, 0x43676adc, 0x53139433, 0x10e2d36f, 0xba5ef88a, 0xbc2d487b, 0x85d21144, 0xc5ad7597, 0xbc9fad0e, 0xe8669ebf, 0x2a580e15, 0xee95b8ae, 0xafe30d7c, 0x3925483, 0x6d4379b8, 0x3bff2758, 0xba82bcd0, 0x9de52fae, 0xc19f3236, 0xf2f2bbcf, 0x65c9da47, 0xf33ebdfc, 0xecd9ea0e, 0x8e80d2cd, 0x3419408f, 0xea652d99, 0x20c7735, 0xa43daed4, 0xed2551f9, 0x63d78bba, 0x4b651bd5, 0x7c69e272, 0x2abd56ee, 0x9ab4179d, 0x62b862c, 0x8caf2c25, 0x73b66096, 0xed1a39db, 0xceef49b6, 0xeb321d4c, 0x5e4df20c, 0x65169178, 0x9bf4fd3b, 0xf6985f9a, 0x8ebc7cc, 0x2c885bc7, 0x5ac592d7, 0x205721a7, 0x1419e27d, 0x22948c2b, 0xb17495cc, 0x81731372, 0x3412326, 0x582a65b, 0x75a4c270, 0xf2ae2cfd, 0xf618e345, 0xd3bdd6e2, 0x558d29a1, 0x3d848ab, 0x78da759a, 0x2d1b32b8, 0x1afaebc5, 0x55021e49, 0x80c99534, 0x21890259, 0xe2bc921b, 0xcf3ac82b, 0x88ccf401, 0x5840a952, 0x480edc7f, 0xf0aae25e, 0x5ac60fe0, 0x94fee19a, 0xe5729f54, 0xe0fb221e, 0x3dd23b67, 0xd8408440, 0x61d4496, 0xe7c7ca62, 0xf739df34, 0x75bab683, 0x6e126046, 0x8bdd628c, 0x58a65d27, 0xcc7148e6, 0x93bab453, 0x4924deef, 0x206404b0, 0x7d81413d, 0xf33609c6, 0x995f4b0d, 0x5048cca4, 0x3f9fd17, 0xf3ecbd96, 0x97ee65c2, 0x37e89e7a, 0x6f0569dc, 0x3faad0f9, 0xceaf2dea, 0xdd221d5f, 0x50b3e235, 0x3c3a8b89, 0xe4945aa9, 0xd0aa65b9, 0x93ee7358, 0x8b3cd96d, 0x2f1b4af6, 0x30f66edd, 0xc9b5baf4, 0x96be36cc, 0x9cae1352, 0xc52b16a, 0xdccff8b, 0x4104069, 0x6b91d024, 0xcb9dc70, 0xadd77490, 0x6640149e, 0xeb297c73, 0x93affa6a, 0x1a58d4, 0xde159fb9, 0xfa0ce323, 0xc941eda9, 0x60679151, 0x41343302, 0xf949e0d5, 0x150ea85d, 0x9aceaca4, 0x2862b26d, 0xd42f3d2e, 0x35a15350, 0x93204b1b, 0x6ad99948, 0xa0c99a1c, 0x59023682, 0x491b86e3, 0xb32b998d, 0x963ab5a9, 0xb28ffb79, 0xc0016d24, 0x13211ae4, 0xdbba74a8, 0x9561412, 0xc14d10e1, 0xca161ba6, 0xb2b3e13f, 0xe68909f3, 0xdd4e862e, 0x1319d68, 0x529b38d9, 0x43a2d3e7, 0xabb8d070, 0x77a609ff, 0x736c7965, 0x5c1cea02, 0x61d17c62, 0x3d7ee71c, 0x692aeece, 0x5ee62cb, 0x66c75dba, 0x881b66aa, 0x5140131a, 0x215470e8, 0x9f361b95, 0x8fbbc63a, 0x6e24af7f, 0x2af6f590, 0xf94b17dc, 0x6bcb8e25, 0xad845be9, 0xaf47b4ed, 0x32d579e8, 0x461e54ea, 0x6d3c470b, 0x28f5796, 0x57e58a06, 0x38492860, 0xcc320e8e, 0x82e4864, 0xe1479157, 0xef53c8cb, 0xe7622fa3, 0xc8372ebf, 0xa9a8017b, 0x84810a20, 0x452c5e6e, 0x436e75b, 0x409b1ab1, 0x4c7e2be6, 0xdada977a, 0x8a6c9880, 0x87184e96, 0xdc215461, 0xcd5a6dc6, 0x2f63a6a4, 0x928e9b92, 0x15634b1b, 0xbbaf3a9c, 0xb556de5, 0x84ddf234, 0x719d6666, 0xc558a5f2, 0x4f212de, 0x91a0ad79, 0x11290332, 0x7738c32e, 0xcfd04207, 0x57ba75d5, 0xa2e3f110, 0x11762ae7, 0xc5d9869d, 0x60bfa38b, 0xb4a795bd, 0x14625ffb, 0x3cfb63fa, 0xfb99e70e, 0xb5ef968, 0x2e7e2e1e, 0x47fdd488, 0xcfd5f8a8, 0xdd7683b0, 0xdffd7c9e, 0x12b83597, 0xb03bd9c2, 0xa90b82dc, 0x91ca62c0, 0x2ff80ae7, 0x29356c8c, 0x85b49291, 0x778572fa, 0xe764a1a1, 0x585d320a, 0x79a39c1c, 0x399c37e9, 0xd8d673cb, 0x97aedb85, 0xd6ba3f51, 0x4ff0ea85, 0x23a7db79, 0xea93002a, 0x8a516656, 0xe8dddfb4, 0x7792e739, 0x41d28138, 0x37fb9a4e, 0x1c635f57, 0x70da1ffa, 0x31660175, 0x7af382d1, 0x7fe4bf8a, 0x55521ec8, 0xba849730, 0x24819f5, 0x354c3b13, 0x8166158c, 0x3f7f2099, 0xac53614d, 0xda072b10, 0xe329504, 0x6a750fd8, 0x28572376, 0x9ddf129b, 0x9ae80bb2, 0x3bd18b44, 0x51b8a683, 0x1a1a86ba, 0xe3f8ee0c, 0x840f3482, 0xca55eb4c, 0x7a25e960, 0x37ae0760, 0x27157d3d, 0x3340e58f, 0x9f2eb164, 0xae3151fa, 0x8b443f4a, 0x27fdd38c, 0xa7758b92, 0x82a7049e, 0x2500efbb, 0xfcf1ce85, 0xc0642090, 0x250a875f, 0x38d83660, 0xc5d63bc, 0x84f43dab, 0xe6290eec, 0xc909291f, 0xb71fd6eb, 0x5b77263, 0x4f71a52c, 0x53096b18, 0x6497bbbe, 0xdf77d74f, 0x14ae3e15, 0xd83ee393, 0x5a249f4d, 0x89d73e21, 0x426804, 0xddda0a27, 0x9fe7c87c, 0xf3267c43, 0x3344fca2, 0xd38f68a2, 0xa007502a, 0xdaa74f4e, 0x524aaad2, 0x19473f66, 0xc1d0c26, 0xa6bbe17a, 0xb92e6eb0, 0xb419b07a, 0xc25e56d1, 0x9c38bdfe, 0x68038f05, 0xccb395fa, 0xb44f4ce6, 0x8d9a8db, 0x95da19f5, 0xc52e5d88, 0xf8356128, 0xbb5290c5, 0x4dcafa05, 0x427b9807, 0x505245ce, 0x41cf4b25, 0x39f96369, 0xa1dea14e, 0xac1e1e21, 0x58656a1b, 0xc76772b3, 0xcbed3c4d, 0x833dcc1e, 0x7236a3ab, 0x9d8200ae, 0xc8624409, 0xbb07343, 0xfd8f8f03, 0x723393c3, 0x4cdd1336, 0xf7cfad61, 0x249c07bf, 0x5c0c24e3, 0xe6bc2650, 0x8dd50d1c, 0x8aa3a2a5, 0x694e85c0, 0xf98895a5, 0xf74ed3dd, 0xa2f88192, 0x33fb994e, 0xfe711567, 0xfe29e1c6, 0x8bcb4bdc, 0xa8c15434, 0x86c3d98a, 0xcf1fafa0, 0x22ab672e, 0x7549603f, 0x5b0f7e7b, 0xe3269edd, 0x6b64292, 0x88afeba4, 0x290fa89d, 0x93c895f8, 0xbee21427, 0xeae12b1c, 0x7c84636, 0x506be81d, 0x5dd5c4b7, 0xb9e43567, 0xdcc2b95a, 0xce23ef9b, 0xb15353bc, 0x7ae5676a, 0xb0e1958c, 0x7cd1ac91, 0x304a8047, 0xd766a65b, 0x7120a387, 0x8e370d7c, 0x94e241d3, 0x4516f0b8, 0xfd605e33, 0x7c9b2ba0, 0x343332cc, 0x469dd63e, 0x3f6b6c66, 0x39b330b3, 0x431dc660, 0xa591aa1e, 0xc00b4c96, 0xebcf6905, 0x74fc55db, 0x3352505f, 0xe92ed69, 0xe13e0d96, 0x822e1ecc, 0x773f2c74, 0x3643056d, 0xb9984c16, 0xcc7153e6, 0x4d88f992, 0x4c1de8dd, 0x7d2f951d, 0x7113012, 0x34240034, 0x97eb307a, 0x16af8e1f, 0xd805ed31, 0x2a6aa2e2, 0x618a45d3, 0x80c46179, 0xbff6b6dd, 0xc99ee8ad, 0x82da2aeb, 0xe75273b3, 0x8a7bd156, 0x3832bb0f, 0xf59d7cc7, 0xbcf626b0, 0xcdd0619c, 0x41ff5ed3, 0x846531b, 0x906ffbfd, 0xb59a672b, 0x21e6e893, 0x770a564f, 0x5f412346, 0xf2929158, 0x153603fa, 0x38afd0d6, 0x8177460b, 0x445ed4e5, 0xb1c4a5c1, 0x14db7a5d, 0x74fc810f, 0x6db9f6b3, 0x5c7c7fe2, 0x1be8a756, 0xd0e5de2d, 0xa23fd973, 0xbba4dbf, 0xcd8effaa, 0x6348ae96, 0xb261846d, 0x7561c667, 0xc4266dd2, 0xbc58f0a8, 0x57ab12ac, 0xe8ddf790, 0xd889b911, 0x47040b6b, 0x6dc3ca58, 0xd15944e6, 0xd2f24f80, 0xa80450f0, 0xa0620d61, 0x2e34452, 0x24b75f77, 0xbc4023c7, 0x141129f4, 0x9a7ea00e, 0x4b172a4, 0xae15bc1a, 0x1114e3a0, 0x957e6381, 0x7565bfb0, 0x92d24558, 0x1d03f9f5, 0x5c6ba416, 0x71ccf22, 0xf56d5b5e, 0xc13e9a15, 0xfca848c4, 0x6514ebc3, 0x631b4eb0, 0xbf375c76, 0xd60fe492, 0x73d0cd61, 0xfb6dae8b, 0x7338e28b, 0x95d9b179, 0x7a62f5b4, 0xabc2334c, 0x79585244, 0x1614e8ad, 0xcd9c1cc0, 0xfdcfb459, 0x67033228, 0xc78d5307, 0xe7998307, 0xfe8eb0f6, 0x97cd521, 0xa758363a, 0xc61ca107, 0x994e0a2, 0x202a0884, 0xb8163d85, 0x9e56e7bd, 0xb0286076, 0x2a73b67, 0x9bdb2cb2, 0x89e37a4c, 0x1b30a9ad, 0xc5c8fe, 0x47daf560, 0xf3816f95, 0xc6b60072, 0xe7c86d7d, 0xe3e1f05c, 0xcbc47d47, 0x82b6a2dc, 0xea4f6aef, 0xb738a299, 0x25434de9, 0x13e950f7, 0x2860ff61, 0x9d849401, 0x3008a10d, 0xd67a5074, 0x9f5be426, 0xb22d68d5, 0xe7e3219b, 0x8e185ea6, 0xfd6db3d4, 0xdc76eca1, 0xb60c1f01, 0xbecd63fe, 0xbb57459f, 0x43b980f5, 0xe8c77071, 0xfff0de72, 0x669fa926, 0x92e0181c, 0x3ff636cb, 0xa3995e72, 0x2c65eb63, 0x7d5cf41f, 0x1e94bcb3, 0xe3ae1042, 0xd0073f43, 0xdfdfe7a0, 0x25942f4a, 0xd908c3a0, 0x43a8ffe1, 0xa5d13b05, 0xd1afd400, 0x95e87ba5, 0x4f82a56e, 0x4815cf48, 0xfb7fb5ab, 0xfddd096c, 0x44426f18, 0xccb69890, 0x889d817d, 0x806b3b60, 0x5080e8e0, 0xc5b67529, 0xe9286898, 0x1fd0d115, 0x5dd6a7f9, 0xebc7d39b, 0x6effe82e, 0xb7a6923, 0x83259d3e, 0x3a85d844, 0xf05add3e, 0xd7ad2f7d, 0x7ec4620, 0x4e39f0f9, 0xb7855c2d, 0x7bfc7f58, 0xe419d166, 0xa669e973, 0x6fc4baa, 0x24d97039, 0x85a52699, 0x4e48cb20, 0x53741168, 0xe30d3821, 0xdc077df6, 0xe3081286, 0x8efaf0c1, 0x83e53d33, 0xb0b2c61f, 0x445fd987, 0x73ee34fb, 0xe15e308d, 0xa0d8dc7f, 0x7f7bd583, 0x4a43c99c, 0x555c468f, 0x264ab1d, 0xe50ad642, 0x93a646ef, 0x3459003d, 0x4fbaced3, 0xd1d19c60, 0x846ba63a, 0xd6be13d2, 0xea9992e8, 0x85d5f5fa, 0x6d2d73a2, 0x2974c31e, 0x3f5558b9, 0xf2f02860, 0x5f0d1bb1, 0xf380dfc, 0xee8e732e, 0xe2f1a153, 0xefd69b29, 0x93083914, 0xd82601f8, 0x60fc1c28, 0xeb92a778, 0xa4125dfe, 0x3a57ac6e, 0x20b7f5b2], 3);\n    test(0x1, [0x77eff, 0x20ccc389, 0x4d65aacb, 0xffc11e85, 0x2591cb4f, 0x3c7053c0, 0x17a38090, 0x65865081, 0x2faebfcc, 0x634e1e47, 0x5876aaed, 0xab7479fc, 0x65928d86, 0xef7f7d19, 0x89efe4b2, 0xd8a7d514, 0x6b5054fe, 0x5032b165, 0xaf6a8b92, 0x8648c9d4, 0x3456fb8b, 0x718620fc, 0xe0cc4dea, 0x3ac5929c, 0x702df9d, 0x88cf598e, 0xaba3c232, 0xe9f96a44, 0x6ad47cd7, 0x750b5fd7, 0x8f064be9, 0x6e4242f1, 0x23f065f7, 0xf06aadde, 0x32b6c760, 0xc7448456, 0xccfd988d, 0xb749d7e9, 0xf7dffd89, 0xcd818407, 0x503c913f, 0x17c1cb3d, 0xb13c0e16, 0x84a5a539, 0xe05b0a01, 0xdd71f780, 0xe504f13c, 0xd442f8d1, 0x15c57508, 0xd460e2d8, 0x9ff7e8d, 0x45e69a73, 0x2b7a01af, 0xf2a8fea, 0xe0cdf279, 0xaba7b9c8, 0x192d421e, 0x97d32447, 0x6bcdb583, 0xabf185c6, 0xf5383f95, 0x696aee31, 0x887d8539, 0x3292b203, 0xb11edbc4, 0x4a252b18, 0x50c5a1f1, 0x2461fc2b, 0xafbe864c, 0xc8874c1a, 0xd5aa0734, 0x699c2550, 0x4ae8a6d, 0x8bf7373, 0xc0097529, 0x9fc06dd2, 0xfd26000f, 0xa91f6c40, 0xbf87c8c4, 0x4c6a3019, 0x47cb2d6f, 0x7235dee2, 0xca0e35d7, 0x38dd2787, 0x1a6d051a, 0x12c7fe99, 0x72a92668, 0x78200416, 0xe899b709, 0x189ebec3, 0x4b2a4be7, 0xe743447e, 0x49aba517, 0x1e96ed7d, 0x21498d64, 0x8659409b, 0x4f53ba5, 0x15685139, 0xadc82a53, 0xeab76ca6, 0x362d4288, 0xe9132520, 0x43fadda2, 0x4c86af0a, 0x7dd7bd17, 0x959a868f, 0xda92aef, 0x90df9c57, 0x92f95f19, 0x9d2b0fc7, 0x259000f3, 0xf4df855c, 0x96dcba4a, 0x42cf84be, 0xb3235d2e, 0x3b23d3a0, 0x1a3296d8, 0x88901497, 0x69ff92b7, 0xf32f2541, 0xb1c43571, 0x7e39274d, 0x6a07a703, 0x8a64cb80, 0xcc9bff8, 0xc3f6d4fd, 0x893081cd, 0xb9bc706, 0xa9ee7234, 0x23d4d1d5, 0x83cfc5c6, 0xcadaf602, 0xf1d0f64c, 0x7a10fdb, 0x96287895, 0xe21482cb, 0xe7455907, 0x8a71184d, 0x23318ac8, 0x72aed44b, 0x23a79d4c, 0xe463042b, 0xceb13214, 0x60a95e1e, 0x65ce2624, 0x89d63367, 0x2a54a707, 0xa6fd0f2d, 0xed7133c4, 0x5c7b9a39, 0x59072ef0, 0x922d9dfc, 0xc03538d2, 0xa3494060, 0xb9db010d, 0x20562c0a, 0xe2205917, 0xb0b13f7c, 0x9fa8fb51, 0xa5d2e787, 0xc03dc379, 0x5a9bc098, 0x595166ca, 0xc3633ddc, 0x4519fe94, 0x5b45a9a0, 0xe558cc8c, 0xc0b6bcc1, 0x6d97625e, 0xe19f9e3c, 0xf6ffc1e9, 0x2fcc098, 0xa9d74d52, 0x7f841373, 0x9f277361, 0x12e40882, 0x1d5ffdec, 0xc975a6dc, 0xf311ba67, 0x1066b762, 0x732d710a, 0x5af59eb6, 0x94115760, 0xf11c39e9, 0x687ba752, 0x613ac9d6, 0x3cadccc6, 0xc34ebac2, 0xe743e147, 0xc5873fe7, 0x92dca8b0, 0x4d25f636, 0xbc1c0f, 0xc5d23b85, 0x9dfd3591, 0x272668aa, 0x539f0014, 0x94215a76, 0x86ed47b0, 0x24e5916, 0xe2cd19e5, 0xb583cf8d, 0x5b7607f1, 0x787bea72, 0xe895c261, 0xc3bc56b5, 0x9f948754, 0x77a70c0a, 0x40cdc60, 0x44dd40b7, 0xedef993d, 0xd4e9ce38, 0xb0de9ed9, 0x8d23a195, 0xff508ce7, 0x11f0dc60, 0x2c1e81f9, 0x78f41fd3, 0x231b5419, 0xbe25d5f1, 0xeebe938e, 0x3124088d, 0xb262acd4, 0x76dd1e74, 0x10e5632b, 0x3af90e86, 0xc16606cd, 0x821c82b8, 0xc0fe07bb, 0x3564bb8f, 0xec4b5618, 0xc9f33fb, 0xb6267c89, 0x84d421c2, 0x1fd038c7, 0x2c1a6f35, 0x516dd45, 0x6574c9a4, 0x6b5c365, 0x1b7c4af8, 0x73f1815, 0x8282ed28, 0x3f07b04d, 0x1a2588db, 0xdc2acab1, 0x49e96971, 0x89f0d52f, 0x3b5485cd, 0x8d85bda8, 0xf7b915ce, 0xd78f562d, 0x473fe757, 0x1fc9d290, 0x3bceaf9c, 0x477894ea, 0x17703e2d, 0x95f451c3, 0x91efe374, 0xf8376d42, 0x6afd3bce, 0x8f9fad2e, 0x5e2af980, 0x4c6119d, 0xd020703f, 0xccf6434b, 0x4a2db623, 0x3ba433b5, 0xb7a6f9dd, 0xce9e7221, 0x9cea2a82, 0x634ad5d4, 0x6d49f653, 0xdd111430, 0xc07abf36, 0xbf435d20, 0x6d8520fd, 0x8e65c29c, 0x6daa7837, 0x22eebad2, 0x5ca5c51f, 0xf56c41c, 0x274130de, 0x1f105d4a, 0xefebb488, 0xb67c06d, 0xea99d663, 0x1b84bc20, 0xc82e6e08, 0x39c81654, 0x9dc7bbcd, 0xb6867232, 0x937424f, 0x8f499ca9, 0xa781c340, 0x336de6c, 0x213894d3, 0x126ce818, 0x4b5b2471, 0xf79f6bea, 0x5c5e5b14, 0x916f082c, 0x464f250f, 0x340b069e, 0x12efa1db, 0x40986b8e, 0x26f275f3, 0xbe6b5f13, 0x295fd4fb, 0x3207aa9a, 0xf04f68eb, 0x94d3f056, 0x5f02a187, 0xf8533ae3, 0xccdfc35, 0xd8c9c5af, 0xbdaf436e, 0x3d66a9bc, 0x4c764ef3, 0x7e67b122, 0x3450d064, 0x9eb56ae4, 0xfb546720, 0xd4381793, 0xe49d09c3, 0x28237b18, 0xc264aed3, 0x4c168e5, 0xa6afd65e, 0x11ecf8a6, 0xa28b2af, 0x7c811ce7, 0xd05a3385, 0x9b38684f, 0xc337fe3f, 0x91a03f71, 0x748d6457, 0x513ea9a0, 0x8825c72a, 0xfd15f2ca, 0x1bfd72c2, 0x946a2ed8, 0x256266e2, 0x6150ee9e, 0x823ffa91, 0x8d0af144, 0x3734db40, 0xbece3cbc, 0xea9c0df4, 0xab52d8ce, 0x764fa091, 0x43d1c4a7, 0x21dc44a3, 0x10fb51d1, 0xc3a5569c, 0x5ebdd696, 0x3675b726, 0xa1352aa9, 0x130299ca, 0x35cdf6cd, 0x186d6546, 0xc0b49699, 0x29864ce6, 0x110888f0, 0x5b413430, 0x42a402b2, 0x186617be, 0xce04652c, 0x24ace269, 0x3184e8b6, 0xee56dd00, 0xa3b3b556, 0x939b05f7, 0x8650cb10, 0xd6f2fd13, 0xecc03709, 0x9f901270, 0x43676adc, 0x53139433, 0x10e2d36f, 0xba5ef88a, 0xbc2d487b, 0x85d21144, 0xc5ad7597, 0xbc9fad0e, 0xe8669ebf, 0x2a580e15, 0xee95b8ae, 0xafe30d7c, 0x3925483, 0x6d4379b8, 0x3bff2758, 0xba82bcd0, 0x9de52fae, 0xc19f3236, 0xf2f2bbcf, 0x65c9da47, 0xf33ebdfc, 0xecd9ea0e, 0x8e80d2cd, 0x3419408f, 0xea652d99, 0x20c7735, 0xa43daed4, 0xed2551f9, 0x63d78bba, 0x4b651bd5, 0x7c69e272, 0x2abd56ee, 0x9ab4179d, 0x62b862c, 0x8caf2c25, 0x73b66096, 0xed1a39db, 0xceef49b6, 0xeb321d4c, 0x5e4df20c, 0x65169178, 0x9bf4fd3b, 0xf6985f9a, 0x8ebc7cc, 0x2c885bc7, 0x5ac592d7, 0x205721a7, 0x1419e27d, 0x22948c2b, 0xb17495cc, 0x81731372, 0x3412326, 0x582a65b, 0x75a4c270, 0xf2ae2cfd, 0xf618e345, 0xd3bdd6e2, 0x558d29a1, 0x3d848ab, 0x78da759a, 0x2d1b32b8, 0x1afaebc5, 0x55021e49, 0x80c99534, 0x21890259, 0xe2bc921b, 0xcf3ac82b, 0x88ccf401, 0x5840a952, 0x480edc7f, 0xf0aae25e, 0x5ac60fe0, 0x94fee19a, 0xe5729f54, 0xe0fb221e, 0x3dd23b67, 0xd8408440, 0x61d4496, 0xe7c7ca62, 0xf739df34, 0x75bab683, 0x6e126046, 0x8bdd628c, 0x58a65d27, 0xcc7148e6, 0x93bab453, 0x4924deef, 0x206404b0, 0x7d81413d, 0xf33609c6, 0x995f4b0d, 0x5048cca4, 0x3f9fd17, 0xf3ecbd96, 0x97ee65c2, 0x37e89e7a, 0x6f0569dc, 0x3faad0f9, 0xceaf2dea, 0xdd221d5f, 0x50b3e235, 0x3c3a8b89, 0xe4945aa9, 0xd0aa65b9, 0x93ee7358, 0x8b3cd96d, 0x2f1b4af6, 0x30f66edd, 0xc9b5baf4, 0x96be36cc, 0x9cae1352, 0xc52b16a, 0xdccff8b, 0x4104069, 0x6b91d024, 0xcb9dc70, 0xadd77490, 0x6640149e, 0xeb297c73, 0x93affa6a, 0x1a58d4, 0xde159fb9, 0xfa0ce323, 0xc941eda9, 0x60679151, 0x41343302, 0xf949e0d5, 0x150ea85d, 0x9aceaca4, 0x2862b26d, 0xd42f3d2e, 0x35a15350, 0x93204b1b, 0x6ad99948, 0xa0c99a1c, 0x59023682, 0x491b86e3, 0xb32b998d, 0x963ab5a9, 0xb28ffb79, 0xc0016d24, 0x13211ae4, 0xdbba74a8, 0x9561412, 0xc14d10e1, 0xca161ba6, 0xb2b3e13f, 0xe68909f3, 0xdd4e862e, 0x1319d68, 0x529b38d9, 0x43a2d3e7, 0xabb8d070, 0x77a609ff, 0x736c7965, 0x5c1cea02, 0x61d17c62, 0x3d7ee71c, 0x692aeece, 0x5ee62cb, 0x66c75dba, 0x881b66aa, 0x5140131a, 0x215470e8, 0x9f361b95, 0x8fbbc63a, 0x6e24af7f, 0x2af6f590, 0xf94b17dc, 0x6bcb8e25, 0xad845be9, 0xaf47b4ed, 0x32d579e8, 0x461e54ea, 0x6d3c470b, 0x28f5796, 0x57e58a06, 0x38492860, 0xcc320e8e, 0x82e4864, 0xe1479157, 0xef53c8cb, 0xe7622fa3, 0xc8372ebf, 0xa9a8017b, 0x84810a20, 0x452c5e6e, 0x436e75b, 0x409b1ab1, 0x4c7e2be6, 0xdada977a, 0x8a6c9880, 0x87184e96, 0xdc215461, 0xcd5a6dc6, 0x2f63a6a4, 0x928e9b92, 0x15634b1b, 0xbbaf3a9c, 0xb556de5, 0x84ddf234, 0x719d6666, 0xc558a5f2, 0x4f212de, 0x91a0ad79, 0x11290332, 0x7738c32e, 0xcfd04207, 0x57ba75d5, 0xa2e3f110, 0x11762ae7, 0xc5d9869d, 0x60bfa38b, 0xb4a795bd, 0x14625ffb, 0x3cfb63fa, 0xfb99e70e, 0xb5ef968, 0x2e7e2e1e, 0x47fdd488, 0xcfd5f8a8, 0xdd7683b0, 0xdffd7c9e, 0x12b83597, 0xb03bd9c2, 0xa90b82dc, 0x91ca62c0, 0x2ff80ae7, 0x29356c8c, 0x85b49291, 0x778572fa, 0xe764a1a1, 0x585d320a, 0x79a39c1c, 0x399c37e9, 0xd8d673cb, 0x97aedb85, 0xd6ba3f51, 0x4ff0ea85, 0x23a7db79, 0xea93002a, 0x8a516656, 0xe8dddfb4, 0x7792e739, 0x41d28138, 0x37fb9a4e, 0x1c635f57, 0x70da1ffa, 0x31660175, 0x7af382d1, 0x7fe4bf8a, 0x55521ec8, 0xba849730, 0x24819f5, 0x354c3b13, 0x8166158c, 0x3f7f2099, 0xac53614d, 0xda072b10, 0xe329504, 0x6a750fd8, 0x28572376, 0x9ddf129b, 0x9ae80bb2, 0x3bd18b44, 0x51b8a683, 0x1a1a86ba, 0xe3f8ee0c, 0x840f3482, 0xca55eb4c, 0x7a25e960, 0x37ae0760, 0x27157d3d, 0x3340e58f, 0x9f2eb164, 0xae3151fa, 0x8b443f4a, 0x27fdd38c, 0xa7758b92, 0x82a7049e, 0x2500efbb, 0xfcf1ce85, 0xc0642090, 0x250a875f, 0x38d83660, 0xc5d63bc, 0x84f43dab, 0xe6290eec, 0xc909291f, 0xb71fd6eb, 0x5b77263, 0x4f71a52c, 0x53096b18, 0x6497bbbe, 0xdf77d74f, 0x14ae3e15, 0xd83ee393, 0x5a249f4d, 0x89d73e21, 0x426804, 0xddda0a27, 0x9fe7c87c, 0xf3267c43, 0x3344fca2, 0xd38f68a2, 0xa007502a, 0xdaa74f4e, 0x524aaad2, 0x19473f66, 0xc1d0c26, 0xa6bbe17a, 0xb92e6eb0, 0xb419b07a, 0xc25e56d1, 0x9c38bdfe, 0x68038f05, 0xccb395fa, 0xb44f4ce6, 0x8d9a8db, 0x95da19f5, 0xc52e5d88, 0xf8356128, 0xbb5290c5, 0x4dcafa05, 0x427b9807, 0x505245ce, 0x41cf4b25, 0x39f96369, 0xa1dea14e, 0xac1e1e21, 0x58656a1b, 0xc76772b3, 0xcbed3c4d, 0x833dcc1e, 0x7236a3ab, 0x9d8200ae, 0xc8624409, 0xbb07343, 0xfd8f8f03, 0x723393c3, 0x4cdd1336, 0xf7cfad61, 0x249c07bf, 0x5c0c24e3, 0xe6bc2650, 0x8dd50d1c, 0x8aa3a2a5, 0x694e85c0, 0xf98895a5, 0xf74ed3dd, 0xa2f88192, 0x33fb994e, 0xfe711567, 0xfe29e1c6, 0x8bcb4bdc, 0xa8c15434, 0x86c3d98a, 0xcf1fafa0, 0x22ab672e, 0x7549603f, 0x5b0f7e7b, 0xe3269edd, 0x6b64292, 0x88afeba4, 0x290fa89d, 0x93c895f8, 0xbee21427, 0xeae12b1c, 0x7c84636, 0x506be81d, 0x5dd5c4b7, 0xb9e43567, 0xdcc2b95a, 0xce23ef9b, 0xb15353bc, 0x7ae5676a, 0xb0e1958c, 0x7cd1ac91, 0x304a8047, 0xd766a65b, 0x7120a387, 0x8e370d7c, 0x94e241d3, 0x4516f0b8, 0xfd605e33, 0x7c9b2ba0, 0x343332cc, 0x469dd63e, 0x3f6b6c66, 0x39b330b3, 0x431dc660, 0xa591aa1e, 0xc00b4c96, 0xebcf6905, 0x74fc55db, 0x3352505f, 0xe92ed69, 0xe13e0d96, 0x822e1ecc, 0x773f2c74, 0x3643056d, 0xb9984c16, 0xcc7153e6, 0x4d88f992, 0x4c1de8dd, 0x7d2f951d, 0x7113012, 0x34240034, 0x97eb307a, 0x16af8e1f, 0xd805ed31, 0x2a6aa2e2, 0x618a45d3, 0x80c46179, 0xbff6b6dd, 0xc99ee8ad, 0x82da2aeb, 0xe75273b3, 0x8a7bd156, 0x3832bb0f, 0xf59d7cc7, 0xbcf626b0, 0xcdd0619c, 0x41ff5ed3, 0x846531b, 0x906ffbfd, 0xb59a672b, 0x21e6e893, 0x770a564f, 0x5f412346, 0xf2929158, 0x153603fa, 0x38afd0d6, 0x8177460b, 0x445ed4e5, 0xb1c4a5c1, 0x14db7a5d, 0x74fc810f, 0x6db9f6b3, 0x5c7c7fe2, 0x1be8a756, 0xd0e5de2d, 0xa23fd973, 0xbba4dbf, 0xcd8effaa, 0x6348ae96, 0xb261846d, 0x7561c667, 0xc4266dd2, 0xbc58f0a8, 0x57ab12ac, 0xe8ddf790, 0xd889b911, 0x47040b6b, 0x6dc3ca58, 0xd15944e6, 0xd2f24f80, 0xa80450f0, 0xa0620d61, 0x2e34452, 0x24b75f77, 0xbc4023c7, 0x141129f4, 0x9a7ea00e, 0x4b172a4, 0xae15bc1a, 0x1114e3a0, 0x957e6381, 0x7565bfb0, 0x92d24558, 0x1d03f9f5, 0x5c6ba416, 0x71ccf22, 0xf56d5b5e, 0xc13e9a15, 0xfca848c4, 0x6514ebc3, 0x631b4eb0, 0xbf375c76, 0xd60fe492, 0x73d0cd61, 0xfb6dae8b, 0x7338e28b, 0x95d9b179, 0x7a62f5b4, 0xabc2334c, 0x79585244, 0x1614e8ad, 0xcd9c1cc0, 0xfdcfb459, 0x67033228, 0xc78d5307, 0xe7998307, 0xfe8eb0f6, 0x97cd521, 0xa758363a, 0xc61ca107, 0x994e0a2, 0x202a0884, 0xb8163d85, 0x9e56e7bd, 0xb0286076, 0x2a73b67, 0x9bdb2cb2, 0x89e37a4c, 0x1b30a9ad, 0xc5c8fe, 0x47daf560, 0xf3816f95, 0xc6b60072, 0xe7c86d7d, 0xe3e1f05c, 0xcbc47d47, 0x82b6a2dc, 0xea4f6aef, 0xb738a299, 0x25434de9, 0x13e950f7, 0x2860ff61, 0x9d849401, 0x3008a10d, 0xd67a5074, 0x9f5be426, 0xb22d68d5, 0xe7e3219b, 0x8e185ea6, 0xfd6db3d4, 0xdc76eca1, 0xb60c1f01, 0xbecd63fe, 0xbb57459f, 0x43b980f5, 0xe8c77071, 0xfff0de72, 0x669fa926, 0x92e0181c, 0x3ff636cb, 0xa3995e72, 0x2c65eb63, 0x7d5cf41f, 0x1e94bcb3, 0xe3ae1042, 0xd0073f43, 0xdfdfe7a0, 0x25942f4a, 0xd908c3a0, 0x43a8ffe1, 0xa5d13b05, 0xd1afd400, 0x95e87ba5, 0x4f82a56e, 0x4815cf48, 0xfb7fb5ab, 0xfddd096c, 0x44426f18, 0xccb69890, 0x889d817d, 0x806b3b60, 0x5080e8e0, 0xc5b67529, 0xe9286898, 0x1fd0d115, 0x5dd6a7f9, 0xebc7d39b, 0x6effe82e, 0xb7a6923, 0x83259d3e, 0x3a85d844, 0xf05add3e, 0xd7ad2f7d, 0x7ec4620, 0x4e39f0f9, 0xb7855c2d, 0x7bfc7f58, 0xe419d166, 0xa669e973, 0x6fc4baa, 0x24d97039, 0x85a52699, 0x4e48cb20, 0x53741168, 0xe30d3821, 0xdc077df6, 0xe3081286, 0x8efaf0c1, 0x83e53d33, 0xb0b2c61f, 0x445fd987, 0x73ee34fb, 0xe15e308d, 0xa0d8dc7f, 0x7f7bd583, 0x4a43c99c, 0x555c468f, 0x264ab1d, 0xe50ad642, 0x93a646ef, 0x3459003d, 0x4fbaced3, 0xd1d19c60, 0x846ba63a, 0xd6be13d2, 0xea9992e8, 0x85d5f5fa, 0x6d2d73a2, 0x2974c31e, 0x3f5558b9, 0xf2f02860, 0x5f0d1bb1, 0xf380dfc, 0xee8e732e, 0xe2f1a153, 0xefd69b29, 0x93083914, 0xd82601f8, 0x60fc1c28, 0xeb92a778, 0xa4125dfe, 0x3a57ac6e, 0x20b7f5b2], 4);\n  });\n}(typeof module !== \"undefined\" ? require(\"../lib/random\") : Random));","/home/travis/build/npmtest/node-npmtest-random-js/node_modules/random-js/spec/engines.nativeMathSpec.js":"(function (Random) {\n  describe(\"engines.nativeMath\", function () {\n    var nativeMath, oldRandom;\n    beforeEach(function () {\n      nativeMath = Random.engines.nativeMath;\n      oldRandom = Math.random;\n      Math.random = jasmine.createSpy();\n    });\n\n    afterEach(function () {\n      Math.random = oldRandom;\n    });\n\n    it(\"returns the result of Math.random() converted to a Int32\", function () {\n      var expected = 0xdeadbeef;\n      Math.random.andReturn(expected / 0x100000000);\n\n      var actual = nativeMath();\n\n      expect(actual).toBe(expected | 0);\n    });\n\n    it(\"normalizes to an integer\", function () {\n      var expected = 0x12345678;\n      Math.random.andReturn((expected + 0.12345678) / 0x100000000);\n\n      var actual = nativeMath();\n\n      expect(actual).toBe(expected | 0);\n    });\n  });\n}(typeof module !== \"undefined\" ? require(\"../lib/random\") : Random));","/home/travis/build/npmtest/node-npmtest-random-js/node_modules/random-js/spec/hexSpec.js":"(function (Random) {\n  describe(\"hex\", function () {\n    var owns = Object.prototype.hasOwnProperty;\n\n    function countUnique(string) {\n      var set = {};\n      var count = 0;\n      var i = string.length;\n      while (i--) {\n        var c = string.charAt(i);\n        if (!owns.call(set, c)) {\n          set[c] = true;\n          ++count;\n        }\n      }\n      return count;\n    }\n    [{\n      upper: true,\n      pool: \"0123456789ABCDEF\"\n    }, {\n      upper: false,\n      pool: \"0123456789abcdef\"\n    }].forEach(function (o) {\n      var upper = o.upper;\n      var pool = o.pool;\n\n      describe(\"when upper = \" + upper, function () {\n        it(\"returns hex strings of the requested length\", function () {\n          var length = 1337;\n          var dummy = function () {};\n          var regex = new RegExp(\"^[\" + pool + \"]{\" + length + \"}$\");\n          spyOn(Random, \"string\").andReturn(dummy);\n\n          var hexer = Random.hex(upper);\n          var actual = hexer(Random.engines.nativeMath, length);\n\n          expect(actual).toMatch(regex);\n          expect(countUnique(actual)).toBe(pool.length);\n        });\n      });\n    });\n  });\n}(typeof module !== \"undefined\" ? require(\"../lib/random\") : Random));","/home/travis/build/npmtest/node-npmtest-random-js/node_modules/random-js/spec/integerSpec.js":"(function (Random) {\n  describe(\"integer distribution\", function () {\n    [-Math.pow(2, 53) - 2, -Infinity, NaN, Infinity].forEach(function (min) {\n      it(\"throws a RangeError if min = \" + min, function () {\n        expect(function () {\n          Random.integer(min, 0);\n        }).toThrow(new RangeError(\"Expected min to be at least \" + (-0x20000000000000)));\n      });\n    });\n\n    [Math.pow(2, 53) + 2, -Infinity, NaN, Infinity].forEach(function (max) {\n      it(\"throws a RangeError if max = \" + max, function () {\n        expect(function () {\n          Random.integer(0, max);\n        }).toThrow(new RangeError(\"Expected max to be at most \" + 0x20000000000000));\n      });\n    });\n\n    var engine;\n    beforeEach(function () {\n      engine = Random.engines.mt19937().autoSeed();\n    });\n\n    function cmp(alpha, bravo) {\n      return alpha === bravo ? 0 : alpha < bravo ? -1 : 1;\n    }\n\n    function sorted(array, comparer) {\n      return array.slice().sort(comparer || cmp);\n    }\n\n    var primeCache = [2, 3];\n\n    function primeGenerator() {\n      var index = 0;\n      return function () {\n        var len = primeCache.length;\n        if (index < len) {\n          var result = primeCache[index];\n          ++index;\n          return result;\n        } else {\n          var current = primeCache[len - 1] + 2;\n          for (;; current += 2) {\n            var prime = true;\n            for (var i = 0; i < len; ++i) {\n              if (current % primeCache[i] === 0) {\n                prime = false;\n                break;\n              }\n            }\n            if (prime) {\n              primeCache.push(current);\n              ++index;\n              return current;\n            }\n          }\n        }\n      };\n    }\n\n    function calculatePrimeFactors(value) {\n      var sqrt = Math.sqrt(value);\n      var result = [];\n      var nextPrime = primeGenerator();\n      while (true) {\n        var prime = nextPrime();\n        if (prime > Math.sqrt(value)) {\n          break;\n        }\n        while (value % prime === 0) {\n          result.push(prime);\n          value /= prime;\n        }\n      }\n      if (value > 1) {\n        result.push(value);\n      }\n      return result;\n    }\n\n    var fullScaleFactors = [5, 13, 37, 109, 246241, 279073];\n\n    function calculatePrimeFactorsOfRange(min, max) {\n      if (max - min < 0x20000000000000) {\n        return calculatePrimeFactors(max - min + 1);\n      } else if (min === -0x20000000000000 && max === 0x20000000000000) {\n        return fullScaleFactors.slice();\n      }\n\n      var extra = 0x20000000000000;\n      var rangeMinusExtra = (max - extra) - min + 1;\n      var nextPrime = primeGenerator();\n      while (true) {\n        var prime = nextPrime();\n        if (rangeMinusExtra % prime === 0) {\n          return [prime].concat(calculatePrimeFactors(Math.round(rangeMinusExtra / prime + extra / prime)));\n        }\n      }\n      throw new Error(\"Can't calclate prime factors of range [\" + min + \", \" + max + \"]\");\n    }\n\n    function distinct(values) {\n      var result = [];\n      for (var i = 0, len = values.length; i < len; ++i) {\n        var value = values[i];\n        if (result.indexOf(value) === -1) {\n          result.push(value);\n        }\n      }\n      return result;\n    }\n\n    function returnValue(value) {\n      return function () {\n        return value;\n      };\n    }\n\n    function toCallback(callback) {\n      return typeof callback === \"function\" ? callback : returnValue(callback);\n    }\n\n    function times(count, callback) {\n      callback = toCallback(callback);\n      var result = [];\n      for (var i = 0; i < count; ++i) {\n        result.push(callback(i));\n      }\n      return result;\n    }\n\n    function verifyBucket(bucket, iterationCount) {\n      var pdf = 1 / bucket.length;\n      var dividend = Math.sqrt(iterationCount * pdf);\n      for (var i = 0, len = bucket.length; i < len; ++i) {\n        var d = Math.abs(bucket[i] - iterationCount * pdf);\n        var s = d / dividend;\n        if (d > 1) {\n          expect(s).not.toBeGreaterThan(5);\n        }\n      }\n    }\n\n    function divmod(divisor, dividend) {\n      var mod = divisor % dividend;\n      if (mod < 0) {\n        mod += dividend;\n        return [Math.floor((divisor - mod) / dividend), mod];\n      } else {\n        return [Math.floor(divisor / dividend), mod];\n      }\n    }\n\n    function testUniformDistribution(min, max, iterationCount) {\n      var range = max - min + 1;\n      var factors = calculatePrimeFactorsOfRange(min, max);\n      if (factors.length === 1) {\n        it(\"is uniformly distributed within [\" + min + \", \" + max + \"] given \" + iterationCount + \" iterations\", function () {\n          var distribution = Random.integer(min, max);\n          var bucket = [];\n          var i;\n          for (i = 0; i < range; ++i) {\n            bucket.push(0);\n          }\n          for (i = 0; i < iterationCount; ++i) {\n            var r = distribution(engine);\n\n            expect(r).not.toBeLessThan(min);\n            expect(r).not.toBeGreaterThan(max);\n            ++bucket[r - min];\n          }\n\n          verifyBucket(bucket, iterationCount);\n        });\n      } else {\n        it(\"is uniformly distributed within [\" + min + \", \" + max + \"] modulo factors {\" + factors.join(\", \") + \"} given \" + iterationCount + \" iterations\", function () {\n          var distribution = Random.integer(min, max);\n          var buckets = times(factors.length, function (i) {\n            return times(factors[i], 0);\n          });\n\n          function addToBuckets(value) {\n            for (var i = 0, len = factors.length; i < len; ++i) {\n              var factor = factors[i];\n              var result = divmod(value, factor);\n              ++buckets[i][result[1]];\n              value = result[0];\n            }\n          }\n          for (var i = 0; i < iterationCount; ++i) {\n            var r = distribution(engine);\n\n            expect(r).not.toBeLessThan(min);\n            expect(r).not.toBeGreaterThan(max);\n\n            addToBuckets(r);\n          }\n\n          buckets.forEach(function (bucket) {\n            verifyBucket(bucket, iterationCount);\n          });\n        });\n      }\n    }\n\n    // same min and max\n    testUniformDistribution(1, 1, 10);\n\n    // fits perfectly into int32\n    testUniformDistribution(0, 0xffffffff, 1000);\n    testUniformDistribution(1, 0x100000000, 1000);\n\n    // easily maskable, since range is 2^x\n    testUniformDistribution(0, 15, 1000);\n    testUniformDistribution(0, 255, 1000);\n\n    // within int32\n    testUniformDistribution(0, 2, 1000);\n    testUniformDistribution(3, 7, 1000);\n    testUniformDistribution(1, 20, 1000);\n    testUniformDistribution(1, 2, 1000);\n    testUniformDistribution(1, 2 * 3, 1000);\n    testUniformDistribution(1, 2 * 3 * 5, 1000);\n    testUniformDistribution(1, 2 * 3 * 5 * 7, 1000);\n    testUniformDistribution(1, 2 * 3 * 5 * 7 * 11, 1000);\n    testUniformDistribution(1, 2 * 3 * 5 * 7 * 11 * 13, 1000);\n    testUniformDistribution(1, 2 * 3 * 5 * 7 * 11 * 13 * 17, 1000);\n    testUniformDistribution(1, 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19, 1000);\n    testUniformDistribution(1, 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23, 1000);\n\n    // lower part of range is evenly int32, high part is easily-maskable.\n    testUniformDistribution(1, 0x200000000, 1000);\n    testUniformDistribution(1, 0x10000000000000, 1000);\n\n    // fits perfectly into uint53\n    testUniformDistribution(1, 0x20000000000000, 1000);\n\n    // within uint53-1\n    testUniformDistribution(1, 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29, 1000);\n    testUniformDistribution(1, 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31, 1000);\n    testUniformDistribution(1, 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37, 1000);\n    testUniformDistribution(1, 2 * 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41, 1000);\n    testUniformDistribution(1, 3 * 5 * 7 * 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41 * 43, 1000);\n    testUniformDistribution(1, 0x300000000, 1000);\n\n    // fits perfectly into int53\n    testUniformDistribution(-0x1fffffffffffff, 0x20000000000000, 1000);\n    testUniformDistribution(-0x20000000000000, 0x1fffffffffffff, 1000);\n\n    // within int53-1\n    testUniformDistribution(-0x1fffffffffffff, 0xe7ab3bddafc0e, 1000);\n    testUniformDistribution(-0xe7ab3bddafc0d, 0x20000000000000, 1000);\n\n    it(\"returns int32 if \" + -0x80000000 + \" and \" + 0x7fffffff + \" are passed in\", function () {\n      var expected = Random.int32;\n\n      var actual = Random.integer(-0x80000000, 0x7fffffff);\n\n      expect(actual).toBe(expected);\n    });\n\n    it(\"returns uint32 if 0 and \" + 0xffffffff + \" are passed in\", function () {\n      var expected = Random.uint32;\n\n      var actual = Random.integer(0, 0xffffffff);\n\n      expect(actual).toBe(expected);\n    });\n\n    it(\"returns uint53 if 0 and \" + 0x1fffffffffffff + \" are passed in\", function () {\n      var expected = Random.uint53;\n\n      var actual = Random.integer(0, 0x1fffffffffffff);\n\n      expect(actual).toBe(expected);\n    });\n\n    it(\"returns uint53Full if 0 and \" + 0x20000000000000 + \" are passed in\", function () {\n      var expected = Random.uint53Full;\n\n      var actual = Random.integer(0, 0x20000000000000);\n\n      expect(actual).toBe(expected);\n    });\n\n    it(\"returns int53 if \" + (-0x20000000000000) + \" and \" + 0x1fffffffffffff + \" are passed in\", function () {\n      var expected = Random.int53;\n\n      var actual = Random.integer(-0x20000000000000, 0x1fffffffffffff);\n\n      expect(actual).toBe(expected);\n    });\n\n    it(\"returns int53Full if \" + (-0x20000000000000) + \" and \" + 0x20000000000000 + \" are passed in\", function () {\n      var expected = Random.int53Full;\n\n      var actual = Random.integer(-0x20000000000000, 0x20000000000000);\n\n      expect(actual).toBe(expected);\n    });\n\n    function testFullScale(min, max, distribution) {\n      it(\"is uniformly distributed within [\" + min + \", \" + max + \"]\", function () {\n        var iterationCount = 1000;\n        var factors = calculatePrimeFactorsOfRange(min + 1, max);\n        var buckets = times(factors.length, function (i) {\n          return times(factors[i], 0);\n        });\n\n        function addToBuckets(value) {\n          for (var i = 0, len = factors.length; i < len; ++i) {\n            var factor = factors[i];\n            var result = divmod(value, factor);\n            ++buckets[i][result[1]];\n            value = result[0];\n          }\n        }\n        for (var i = 0; i < iterationCount; ++i) {\n          var r = 0;\n          do {\n            r = distribution(engine);\n          } while (r === min);\n\n          expect(r).not.toBeLessThan(min);\n          expect(r).not.toBeGreaterThan(max);\n\n          addToBuckets(r);\n        }\n\n        buckets.forEach(function (bucket) {\n          verifyBucket(bucket, iterationCount);\n        });\n      });\n    }\n\n    testFullScale(-0x20000000000000, 0x20000000000000, Random.int53Full);\n    testFullScale(0, 0x20000000000000, Random.uint53Full);\n\n    function makeEngine(input) {\n      var index = 0;\n      return function () {\n        if (index >= input.length) {\n          return 0;\n        } else {\n          return input[index++] | 0;\n        }\n      };\n    }\n\n    it(\"can generate \" + 0x20000000000000 + \" given a distribution of [\" + (-0x20000000000000) + \", \" + 0x20000000000000 + \"]\", function () {\n      var distribution = Random.int53Full;\n      var engine = makeEngine([0x400000, 0]);\n\n      var actual = distribution(engine);\n\n      expect(actual).toBe(0x20000000000000);\n    });\n\n    it(\"can generate \" + 0x20000000000000 + \" given a distribution of [0, \" + 0x20000000000000 + \"]\", function () {\n      var distribution = Random.uint53Full;\n      var engine = makeEngine([0x200000, 0]);\n\n      var actual = distribution(engine);\n\n      expect(actual).toBe(0x20000000000000);\n    });\n  });\n}(typeof module !== \"undefined\" ? require(\"../lib/random\") : Random));","/home/travis/build/npmtest/node-npmtest-random-js/node_modules/random-js/spec/pickSpec.js":"(function (Random) {\n  describe(\"pick\", function () {\n    describe(\"with an empty array\", function () {\n      it(\"returns undefined\", function () {\n        var engine = function () {};\n        spyOn(Random, \"integer\");\n        var array = {\n          length: 0\n        };\n\n        var actual = Random.pick(engine, array);\n\n        expect(Random.integer).not.toHaveBeenCalled();\n        expect(actual).toBeUndefined();\n      });\n    });\n\n    describe(\"with a non-empty array\", function () {\n      it(\"creates an integer distribution and indexes upon a provided array\", function () {\n        var engine = function () {};\n        var length = 1337;\n        var index = 1234;\n        var spy = jasmine.createSpy().andReturn(index);\n        spyOn(Random, \"integer\").andReturn(spy);\n        var array = {\n          length: length\n        };\n        var dummy = \"hello\";\n        array[index] = dummy;\n\n        var actual = Random.pick(engine, array);\n\n        expect(Random.integer).toHaveBeenCalledWith(0, length - 1);\n        expect(spy).toHaveBeenCalledWith(engine);\n        expect(actual).toBe(dummy);\n      });\n\n      it(\"creates an integer distribution and indexes upon a provided array within the bounds\", function () {\n        var engine = function () {};\n        var length = 1337;\n        var index = 1234;\n        var begin = 13;\n        var end = -17;\n        var spy = jasmine.createSpy().andReturn(index);\n        spyOn(Random, \"integer\").andReturn(spy);\n        var array = {\n          length: length\n        };\n        var dummy = \"hello\";\n        array[index] = dummy;\n\n        var actual = Random.pick(engine, array, begin, end);\n\n        expect(Random.integer).toHaveBeenCalledWith(begin, length + end - 1);\n        expect(spy).toHaveBeenCalledWith(engine);\n        expect(actual).toBe(dummy);\n      });\n    });\n  });\n}(typeof module !== \"undefined\" ? require(\"../lib/random\") : Random));","/home/travis/build/npmtest/node-npmtest-random-js/node_modules/random-js/spec/pickerSpec.js":"(function (Random) {\n  describe(\"picker\", function () {\n    it(\"returns a function that returns undefined when passed an empty array\", function () {\n      var array = {\n        length: 0\n      };\n      spyOn(Random, \"integer\");\n\n      var picker = Random.picker(array);\n      var actual = picker(); // no engine needed\n\n      expect(actual).toBeUndefined();\n      expect(Random.integer).not.toHaveBeenCalled();\n    });\n\n    it(\"returns a function that allows for indexing upon the provided array\", function () {\n      var engine = function () {};\n      var length = 1337;\n      var index = 1234;\n      var spy = jasmine.createSpy().andReturn(index);\n      spyOn(Random, \"integer\").andReturn(spy);\n      var array = {\n        length: length\n      };\n      var dummy = \"hello\";\n      array[index] = dummy;\n\n      var picker = Random.picker(array);\n      var actual = picker(engine);\n\n      expect(Random.integer).toHaveBeenCalledWith(0, length - 1);\n      expect(spy).toHaveBeenCalledWith(engine);\n      expect(actual).toBe(dummy);\n    });\n\n    it(\"clones the initial array rather than holding onto the reference\", function () {\n      var engine = function () {};\n      var length = 1337;\n      var index = 1234;\n      var spy = jasmine.createSpy().andReturn(index);\n      spyOn(Random, \"integer\").andReturn(spy);\n      var array = {\n        length: length\n      };\n      var dummy = \"hello\";\n      array[index] = dummy;\n\n      var picker = Random.picker(array);\n      array[index] = \"there\";\n      array.length = 0;\n      var actual = picker(engine);\n\n      expect(actual).toBe(dummy);\n    });\n\n    it(\"slices the array with the arguments provided\", function () {\n      var engine = function () {};\n      var length = 1337;\n      var index = 1234;\n      var begin = 7;\n      var end = -11;\n      var spy = jasmine.createSpy().andReturn(index - begin);\n      spyOn(Random, \"integer\").andReturn(spy);\n      var array = {\n        length: length\n      };\n      var dummy = \"hello\";\n      array[index] = dummy;\n\n      var picker = Random.picker(array, begin, end);\n      array[index] = \"there\";\n      array.length = 0;\n      var actual = picker(engine);\n\n      expect(Random.integer).toHaveBeenCalledWith(0, length - begin + end - 1);\n      expect(actual).toBe(dummy);\n    });\n  });\n}(typeof module !== \"undefined\" ? require(\"../lib/random\") : Random));","/home/travis/build/npmtest/node-npmtest-random-js/node_modules/random-js/spec/realSpec.js":"(function (Random) {\n  describe(\"real distribution\", function () {\n    describe(\"realZeroToOneInclusive\", function () {\n      it(\"calls uint53Full and divides by the maximum\", function () {\n        var dummy = 0x1234567890abcd;\n        spyOn(Random, \"uint53Full\").andReturn(dummy);\n        var expected = dummy / 0x20000000000000;\n\n        var actual = Random.realZeroToOneInclusive(function () {\n          return 0;\n        });\n\n        expect(actual).toBe(expected);\n      });\n    });\n\n    describe(\"realZeroToOneExclusive\", function () {\n      it(\"calls uint53 and divides by the maximum\", function () {\n        var dummy = 0x1234567890abcd;\n        spyOn(Random, \"uint53\").andReturn(dummy);\n        var expected = dummy / 0x20000000000000;\n\n        var actual = Random.realZeroToOneExclusive(function () {\n          return 0;\n        });\n\n        expect(actual).toBe(expected);\n      });\n    });\n\n    [-Infinity, NaN, Infinity].forEach(function (value) {\n      it(\"throws a RangeError if left = \" + value, function () {\n        expect(function () {\n          Random.real(value, 0);\n        }).toThrow(new RangeError(\"Expected left to be a finite number\"));\n      });\n\n      it(\"throws a RangeError if right = \" + value, function () {\n        expect(function () {\n          Random.real(0, value);\n        }).toThrow(new RangeError(\"Expected right to be a finite number\"));\n      });\n    });\n\n    [{\n      arg: true,\n      method: \"realZeroToOneInclusive\"\n    }, {\n      arg: false,\n      method: \"realZeroToOneExclusive\"\n    }].forEach(function (o) {\n      var arg = o.arg;\n      var method = o.method;\n\n      it(\"returns \" + method + \" if passed 0, 1, \" + arg, function () {\n        var expected = Random[method];\n\n        var actual = Random.real(0, 1, arg);\n\n        expect(actual).toBe(expected);\n      });\n\n      it(\"multiplies the result of \" + method + \" based on the range\", function () {\n        var range = 1234.5678;\n        var dummy = 0.123456789;\n        spyOn(Random, method).andReturn(dummy);\n        var distribution = Random.real(0, range, arg);\n        var expected = range * dummy;\n\n        var actual = distribution(function () {\n          return 0;\n        });\n\n        expect(actual).toBe(expected);\n      });\n\n      it(\"multiplies the result of \" + method + \" based on the range and adds based on the left value\", function () {\n        var left = 98765.4321;\n        var range = 1234.5678;\n        var dummy = 0.123456789;\n        spyOn(Random, method).andReturn(dummy);\n        var distribution = Random.real(left, left + range, arg);\n        var expected = (range * dummy) + left;\n\n        var actual = distribution(function () {\n          return 0;\n        });\n\n        expect(actual).toBe(expected);\n      });\n\n      it(\"works despite right being less than left\", function () {\n        var left = 98765.4321;\n        var range = 1234.5678;\n        var dummy = 0.123456789;\n        spyOn(Random, method).andReturn(dummy);\n        var distribution = Random.real(left, left - range, arg);\n        var expected = (-range * dummy) + left;\n\n        var actual = distribution(function () {\n          return 0;\n        });\n\n        expect(actual).toBe(expected);\n      });\n\n      it(\"always returns the value when left and right are equal\", function () {\n        spyOn(Random, method);\n        var dummy = 1234.5678;\n        var distribution = Random.real(dummy, dummy);\n\n        var actual = distribution(function () {\n          return 0;\n        });\n\n        expect(actual).toBe(dummy);\n        expect(Random[method]).not.toHaveBeenCalled();\n      });\n    });\n  });\n}(typeof module !== \"undefined\" ? require(\"../lib/random\") : Random));","/home/travis/build/npmtest/node-npmtest-random-js/node_modules/random-js/spec/sampleSpec.js":"(function (Random) {\n  describe(\"sample\", function () {\n    [-Infinity, Infinity, NaN, -1, 5].forEach(function (sampleSize) {\n      it(\"throws a RangeError if sampleSize is \" + sampleSize, function () {\n        expect(function () {\n          Random.sample(function () {}, [], sampleSize);\n        }).toThrow(new RangeError(\"Expected sampleSize to be within 0 and the length of the population\"));\n      });\n    });\n\n    describe(\"when sampleSize is the same as length\", function () {\n      it(\"calls shuffle on a clone of the array\", function () {\n        var dummy = [];\n        spyOn(Random, \"shuffle\").andReturn(dummy);\n        var engine = function () {};\n        var array = [\"a\", \"b\", \"c\"];\n\n        var actual = Random.sample(engine, array, array.length);\n\n        expect(actual).toBe(dummy);\n        expect(Random.shuffle).toHaveBeenCalledWith(engine, array, 0);\n        expect(Random.shuffle.mostRecentCall.args[1]).not.toBe(array);\n      });\n    });\n\n    describe(\"when sampleSize is less than the length\", function () {\n      it(\"calls shuffle on a clone of the array\", function () {\n        var dummy = [\"e\", \"d\", \"c\", \"b\", \"a\"];\n        spyOn(Random, \"shuffle\").andReturn(dummy);\n        var engine = function () {};\n        var array = [\"a\", \"b\", \"c\", \"d\", \"e\"];\n        var sampleSize = 3;\n        var expected = dummy.slice(array.length - sampleSize);\n\n        var actual = Random.sample(engine, array, sampleSize);\n\n        expect(actual).toEqual(expected);\n        expect(Random.shuffle).toHaveBeenCalledWith(engine, array, array.length - sampleSize - 1);\n        expect(Random.shuffle.mostRecentCall.args[1]).not.toBe(array);\n      });\n    });\n\n    describe(\"when sampleSize is 0\", function () {\n      it(\"returns an empty array\", function () {\n        var array = [\"a\", \"b\", \"c\"];\n        var expected = [];\n        var engine = function () {};\n        var sampleSize = 0;\n\n        var actual = Random.sample(engine, array, sampleSize);\n\n        expect(actual).toEqual(expected);\n      });\n\n      it(\"does not call shuffle\", function () {\n        var array = [\"a\", \"b\", \"c\"];\n        spyOn(Random, \"shuffle\");\n        var engine = function () {};\n        var sampleSize = 0;\n\n        Random.sample(engine, array, sampleSize);\n\n        expect(Random.shuffle).not.toHaveBeenCalled();\n      });\n\n      it(\"does not call the engine\", function () {\n        var array = [\"a\", \"b\", \"c\"];\n        spyOn(Random, \"shuffle\");\n        var engine = jasmine.createSpy();\n        var sampleSize = 0;\n\n        Random.sample(engine, array, sampleSize);\n\n        expect(engine).not.toHaveBeenCalled();\n      });\n    });\n  });\n}(typeof module !== \"undefined\" ? require(\"../lib/random\") : Random));","/home/travis/build/npmtest/node-npmtest-random-js/node_modules/random-js/spec/shuffleSpec.js":"(function (Random) {\n  describe(\"shuffle\", function () {\n    it(\"generates evenly-distributed integers from [0, n) where n is the length and decreases each iteration, swapping items each time\", function () {\n      var engine = function () {};\n      var values = [2, 3, 0, 1];\n      var nextValue = 0;\n      spyOn(Random, \"integer\").andCallFake(function (min, max) {\n        expect(min).toBe(0);\n        expect(max).toBe(values.length);\n        return function (e) {\n          expect(e).toBe(engine);\n          return values.shift();\n        };\n      });\n      var array = [\"a\", \"b\", \"c\", \"d\", \"e\"];\n      var expected = [\"e\", \"b\", \"a\", \"d\", \"c\"];\n\n      var actual = Random.shuffle(engine, array);\n\n      expect(actual).toEqual(expected);\n      expect(actual).toBe(array);\n    });\n\n    describe(\"with downTo\", function () {\n      it(\"generates evenly-distributed integers from [0, n) where n is the length and decreases each iteration, swapping items each time\", function () {\n        var engine = function () {};\n        var values = [2, 3];\n        var nextValue = 0;\n        var downTo = 2;\n        spyOn(Random, \"integer\").andCallFake(function (min, max) {\n          expect(min).toBe(0);\n          expect(max).toBe(values.length + 2);\n          return function (e) {\n            expect(e).toBe(engine);\n            return values.shift();\n          };\n        });\n        var array = [\"a\", \"b\", \"c\", \"d\", \"e\"];\n        var expected = [\"a\", \"b\", \"e\", \"d\", \"c\"];\n\n        var actual = Random.shuffle(engine, array, downTo);\n\n        expect(actual).toEqual(expected);\n        expect(actual).toBe(array);\n      });\n    });\n\n    describe(\"with an empty array\", function () {\n      it(\"returns the same empty array\", function () {\n        var engine = function () {};\n        var array = [];\n\n        var actual = Random.shuffle(engine, array);\n\n        expect(actual).toEqual([]);\n        expect(actual).toBe(array);\n      });\n\n      it(\"does not call the engine\", function () {\n        var engine = jasmine.createSpy();\n\n        Random.shuffle(engine, []);\n\n        expect(engine).not.toHaveBeenCalled();\n      });\n    });\n  });\n}(typeof module !== \"undefined\" ? require(\"../lib/random\") : Random));","/home/travis/build/npmtest/node-npmtest-random-js/node_modules/random-js/spec/stringSpec.js":"(function (Random) {\n  describe(\"string\", function () {\n    describe(\"with pool = 'abcde'\", function () {\n      it(\"calls Random.integer\", function () {\n        spyOn(Random, \"integer\");\n\n        Random.string(\"abcde\");\n\n        expect(Random.integer).toHaveBeenCalledWith(0, 4);\n      });\n\n      it(\"calls the integer distribution N times based on the length\", function () {\n        var index = 0;\n        var expected = \"\";\n        spyOn(Random, \"integer\").andReturn(function () {\n          index = (index + 3) % 5;\n          expected += \"abcde\".charAt(index);\n          return index;\n        });\n        var engine = function () {};\n        var generate = Random.string(\"abcde\");\n\n        var actual = generate(engine, 64);\n\n        expect(actual).toBe(expected);\n        expect(actual.length).toBe(64);\n      });\n    });\n\n    describe(\"with default pool\", function () {\n      it(\"calls Random.integer\", function () {\n        spyOn(Random, \"integer\");\n\n        Random.string();\n\n        expect(Random.integer).toHaveBeenCalledWith(0, 63);\n      });\n\n      it(\"uses a pool of letters, numbers, '_', and '-'\", function () {\n        var index = 0;\n        spyOn(Random, \"integer\").andReturn(function () {\n          return index++;\n        });\n        var engine = function () {};\n        var expected = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-\";\n        var generate = Random.string();\n\n        var actual = generate(engine, 64);\n\n        expect(actual).toBe(expected);\n      });\n    });\n\n    describe(\"with pool = ''\", function () {\n      it(\"throws an error\", function () {\n        expect(function () {\n          Random.string(\"\");\n        }).toThrow(new Error(\"Expected pool not to be an empty string\"));\n      });\n    });\n  });\n}(typeof module !== \"undefined\" ? require(\"../lib/random\") : Random));","/home/travis/build/npmtest/node-npmtest-random-js/node_modules/random-js/spec/uuid4Spec.js":"(function (Random) {\n  describe(\"uuid4\", function () {\n    function makeEngine(input) {\n      var index = 0;\n      return function () {\n        return input[index++] | 0;\n      };\n    }\n\n    [{\n      input: [0, 0, 0, 0],\n      output: \"00000000-0000-4000-8000-000000000000\"\n    }, {\n      input: [0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff],\n      output: \"ffffffff-ffff-4fff-bfff-ffffffffffff\"\n    }, {\n      input: [0xdeadbeef, 0x12345678, 0xfedcba98, 0x13371337],\n      output: \"deadbeef-5678-4567-ba98-cba913371337\"\n    }, {\n      input: [0x12345678, 0x90abcdef, 0x94746842, 0x81354732],\n      output: \"12345678-cdef-4cde-a842-468481354732\"\n    }].forEach(function (o) {\n      var input = o.input;\n      var output = o.output;\n      describe(\"with an engine that produces \" + input, function () {\n        it(\"returns '\" + output + \"'\", function () {\n          var engine = makeEngine(input);\n\n          var actual = Random.uuid4(engine);\n\n          expect(actual).toBe(output);\n        });\n      });\n    });\n  });\n}(typeof module !== \"undefined\" ? require(\"../lib/random\") : Random));"}